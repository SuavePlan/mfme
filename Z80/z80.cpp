//---------------------------------------------------------------------------

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "z80.h"

//---------------------------------------------------------------------------

#pragma package(smart_init)

#define Z80_RDOP(A)		  Z80_RDSTACK(A)
#define Z80_RDOP_ARG(A)	Z80_RDSTACK(A)

#define M_RDMEM(A)      Z80_RDMEM(A)
#define M_WRMEM(A,V)    Z80_WRMEM(A,V)
#define M_RDOP(A)       Z80_RDOP(A)
#define M_RDOP_ARG(A)   Z80_RDOP_ARG(A)
#define M_RDSTACK(A)    Z80_RDSTACK(A)
#define M_WRSTACK(A,V)  Z80_WRSTACK(A,V)
#define DoIn(lo,hi)     Z80_In((lo)+(((unsigned)(hi))<<8))
#define DoOut(lo,hi,v)  Z80_Out((lo)+(((unsigned)(hi))<<8),v)

#define M_SKIP_CALL     R.PC.W.l+=2
#define M_SKIP_JP       R.PC.W.l+=2
#define M_SKIP_JR       R.PC.W.l+=1
#define M_SKIP_RET

static short DAATable[2048]= {
  68, 256, 512, 772, 1024, 1284, 1540, 1792,
  2056, 2316, 4112, 4372, 4628, 4880, 5140, 5392,
  4096, 4356, 4612, 4864, 5124, 5376, 5632, 5892,
  6156, 6408, 8240, 8500, 8756, 9008, 9268, 9520,
  8224, 8484, 8740, 8992, 9252, 9504, 9760, 10020,
  10284, 10536, 12340, 12592, 12848, 13108, 13360, 13620,
  12324, 12576, 12832, 13092, 13344, 13604, 13860, 14112,
  14376, 14636, 16400, 16660, 16916, 17168, 17428, 17680,
  16384, 16644, 16900, 17152, 17412, 17664, 17920, 18180,
  18444, 18696, 20500, 20752, 21008, 21268, 21520, 21780,
  20484, 20736, 20992, 21252, 21504, 21764, 22020, 22272,
  22536, 22796, 24628, 24880, 25136, 25396, 25648, 25908,
  24612, 24864, 25120, 25380, 25632, 25892, 26148, 26400,
  26664, 26924, 28720, 28980, 29236, 29488, 29748, 30000,
  28704, 28964, 29220, 29472, 29732, 29984, 30240, 30500,
  30764, 31016, -32624, -32364, -32108, -31856, -31596, -31344,
  -32640, -32380, -32124, -31872, -31612, -31360, -31104, -30844,
  -30580, -30328, -28524, -28272, -28016, -27756, -27504, -27244,
  -28540, -28288, -28032, -27772, -27520, -27260, -27004, -26752,
  -26488, -26228, 85, 273, 529, 789, 1041, 1301,
  69, 257, 513, 773, 1025, 1285, 1541, 1793,
  2057, 2317, 4113, 4373, 4629, 4881, 5141, 5393,
  4097, 4357, 4613, 4865, 5125, 5377, 5633, 5893,
  6157, 6409, 8241, 8501, 8757, 9009, 9269, 9521,
  8225, 8485, 8741, 8993, 9253, 9505, 9761, 10021,
  10285, 10537, 12341, 12593, 12849, 13109, 13361, 13621,
  12325, 12577, 12833, 13093, 13345, 13605, 13861, 14113,
  14377, 14637, 16401, 16661, 16917, 17169, 17429, 17681,
  16385, 16645, 16901, 17153, 17413, 17665, 17921, 18181,
  18445, 18697, 20501, 20753, 21009, 21269, 21521, 21781,
  20485, 20737, 20993, 21253, 21505, 21765, 22021, 22273,
  22537, 22797, 24629, 24881, 25137, 25397, 25649, 25909,
  24613, 24865, 25121, 25381, 25633, 25893, 26149, 26401,
  26665, 26925, 28721, 28981, 29237, 29489, 29749, 30001,
  28705, 28965, 29221, 29473, 29733, 29985, 30241, 30501,
  30765, 31017, -32623, -32363, -32107, -31855, -31595, -31343,
  -32639, -32379, -32123, -31871, -31611, -31359, -31103, -30843,
  -30579, -30327, -28523, -28271, -28015, -27755, -27503, -27243,
  -28539, -28287, -28031, -27771, -27519, -27259, -27003, -26751,
  -26487, -26227, -24395, -24143, -23887, -23627, -23375, -23115,
  -24411, -24159, -23903, -23643, -23391, -23131, -22875, -22623,
  -22359, -22099, -20303, -20043, -19787, -19535, -19275, -19023,
  -20319, -20059, -19803, -19551, -19291, -19039, -18783, -18523,
  -18259, -18007, -16235, -15983, -15727, -15467, -15215, -14955,
  -16251, -15999, -15743, -15483, -15231, -14971, -14715, -14463,
  -14199, -13939, -12143, -11883, -11627, -11375, -11115, -10863,
  -12159, -11899, -11643, -11391, -11131, -10879, -10623, -10363,
  -10099, -9847, -8015, -7755, -7499, -7247, -6987, -6735,
  -8031, -7771, -7515, -7263, -7003, -6751, -6495, -6235,
  -5971, -5719, -3915, -3663, -3407, -3147, -2895, -2635,
  -3931, -3679, -3423, -3163, -2911, -2651, -2395, -2143,
  -1879, -1619, 85, 273, 529, 789, 1041, 1301,
  69, 257, 513, 773, 1025, 1285, 1541, 1793,
  2057, 2317, 4113, 4373, 4629, 4881, 5141, 5393,
  4097, 4357, 4613, 4865, 5125, 5377, 5633, 5893,
  6157, 6409, 8241, 8501, 8757, 9009, 9269, 9521,
  8225, 8485, 8741, 8993, 9253, 9505, 9761, 10021,
  10285, 10537, 12341, 12593, 12849, 13109, 13361, 13621,
  12325, 12577, 12833, 13093, 13345, 13605, 13861, 14113,
  14377, 14637, 16401, 16661, 16917, 17169, 17429, 17681,
  16385, 16645, 16901, 17153, 17413, 17665, 17921, 18181,
  18445, 18697, 20501, 20753, 21009, 21269, 21521, 21781,
  20485, 20737, 20993, 21253, 21505, 21765, 22021, 22273,
  22537, 22797, 24629, 24881, 25137, 25397, 25649, 25909,
  1540, 1792, 2056, 2316, 2572, 2824, 3084, 3336,
  3592, 3852, 4112, 4372, 4628, 4880, 5140, 5392,
  5632, 5892, 6156, 6408, 6664, 6924, 7176, 7436,
  7692, 7944, 8240, 8500, 8756, 9008, 9268, 9520,
  9760, 10020, 10284, 10536, 10792, 11052, 11304, 11564,
  11820, 12072, 12340, 12592, 12848, 13108, 13360, 13620,
  13860, 14112, 14376, 14636, 14892, 15144, 15404, 15656,
  15912, 16172, 16400, 16660, 16916, 17168, 17428, 17680,
  17920, 18180, 18444, 18696, 18952, 19212, 19464, 19724,
  19980, 20232, 20500, 20752, 21008, 21268, 21520, 21780,
  22020, 22272, 22536, 22796, 23052, 23304, 23564, 23816,
  24072, 24332, 24628, 24880, 25136, 25396, 25648, 25908,
  26148, 26400, 26664, 26924, 27180, 27432, 27692, 27944,
  28200, 28460, 28720, 28980, 29236, 29488, 29748, 30000,
  30240, 30500, 30764, 31016, 31272, 31532, 31784, 32044,
  32300, 32552, -32624, -32364, -32108, -31856, -31596, -31344,
  -31104, -30844, -30580, -30328, -30072, -29812, -29560, -29300,
  -29044, -28792, -28524, -28272, -28016, -27756, -27504, -27244,
  -27004, -26752, -26488, -26228, -25972, -25720, -25460, -25208,
  -24952, -24692, 85, 273, 529, 789, 1041, 1301,
  1541, 1793, 2057, 2317, 2573, 2825, 3085, 3337,
  3593, 3853, 4113, 4373, 4629, 4881, 5141, 5393,
  5633, 5893, 6157, 6409, 6665, 6925, 7177, 7437,
  7693, 7945, 8241, 8501, 8757, 9009, 9269, 9521,
  9761, 10021, 10285, 10537, 10793, 11053, 11305, 11565,
  11821, 12073, 12341, 12593, 12849, 13109, 13361, 13621,
  13861, 14113, 14377, 14637, 14893, 15145, 15405, 15657,
  15913, 16173, 16401, 16661, 16917, 17169, 17429, 17681,
  17921, 18181, 18445, 18697, 18953, 19213, 19465, 19725,
  19981, 20233, 20501, 20753, 21009, 21269, 21521, 21781,
  22021, 22273, 22537, 22797, 23053, 23305, 23565, 23817,
  24073, 24333, 24629, 24881, 25137, 25397, 25649, 25909,
  26149, 26401, 26665, 26925, 27181, 27433, 27693, 27945,
  28201, 28461, 28721, 28981, 29237, 29489, 29749, 30001,
  30241, 30501, 30765, 31017, 31273, 31533, 31785, 32045,
  32301, 32553, -32623, -32363, -32107, -31855, -31595, -31343,
  -31103, -30843, -30579, -30327, -30071, -29811, -29559, -29299,
  -29043, -28791, -28523, -28271, -28015, -27755, -27503, -27243,
  -27003, -26751, -26487, -26227, -25971, -25719, -25459, -25207,
  -24951, -24691, -24395, -24143, -23887, -23627, -23375, -23115,
  -22875, -22623, -22359, -22099, -21843, -21591, -21331, -21079,
  -20823, -20563, -20303, -20043, -19787, -19535, -19275, -19023,
  -18783, -18523, -18259, -18007, -17751, -17491, -17239, -16979,
  -16723, -16471, -16235, -15983, -15727, -15467, -15215, -14955,
  -14715, -14463, -14199, -13939, -13683, -13431, -13171, -12919,
  -12663, -12403, -12143, -11883, -11627, -11375, -11115, -10863,
  -10623, -10363, -10099, -9847, -9591, -9331, -9079, -8819,
  -8563, -8311, -8015, -7755, -7499, -7247, -6987, -6735,
  -6495, -6235, -5971, -5719, -5463, -5203, -4951, -4691,
  -4435, -4183, -3915, -3663, -3407, -3147, -2895, -2635,
  -2395, -2143, -1879, -1619, -1363, -1111, -851, -599,
  -343, -83, 85, 273, 529, 789, 1041, 1301,
  1541, 1793, 2057, 2317, 2573, 2825, 3085, 3337,
  3593, 3853, 4113, 4373, 4629, 4881, 5141, 5393,
  5633, 5893, 6157, 6409, 6665, 6925, 7177, 7437,
  7693, 7945, 8241, 8501, 8757, 9009, 9269, 9521,
  9761, 10021, 10285, 10537, 10793, 11053, 11305, 11565,
  11821, 12073, 12341, 12593, 12849, 13109, 13361, 13621,
  13861, 14113, 14377, 14637, 14893, 15145, 15405, 15657,
  15913, 16173, 16401, 16661, 16917, 17169, 17429, 17681,
  17921, 18181, 18445, 18697, 18953, 19213, 19465, 19725,
  19981, 20233, 20501, 20753, 21009, 21269, 21521, 21781,
  22021, 22273, 22537, 22797, 23053, 23305, 23565, 23817,
  24073, 24333, 24629, 24881, 25137, 25397, 25649, 25909,
  70, 258, 514, 774, 1026, 1286, 1542, 1794,
  2058, 2318, 1026, 1286, 1542, 1794, 2058, 2318,
  4098, 4358, 4614, 4866, 5126, 5378, 5634, 5894,
  6158, 6410, 5126, 5378, 5634, 5894, 6158, 6410,
  8226, 8486, 8742, 8994, 9254, 9506, 9762, 10022,
  10286, 10538, 9254, 9506, 9762, 10022, 10286, 10538,
  12326, 12578, 12834, 13094, 13346, 13606, 13862, 14114,
  14378, 14638, 13346, 13606, 13862, 14114, 14378, 14638,
  16386, 16646, 16902, 17154, 17414, 17666, 17922, 18182,
  18446, 18698, 17414, 17666, 17922, 18182, 18446, 18698,
  20486, 20738, 20994, 21254, 21506, 21766, 22022, 22274,
  22538, 22798, 21506, 21766, 22022, 22274, 22538, 22798,
  24614, 24866, 25122, 25382, 25634, 25894, 26150, 26402,
  26666, 26926, 25634, 25894, 26150, 26402, 26666, 26926,
  28706, 28966, 29222, 29474, 29734, 29986, 30242, 30502,
  30766, 31018, 29734, 29986, 30242, 30502, 30766, 31018,
  -32638, -32378, -32122, -31870, -31610, -31358, -31102, -30842,
  -30578, -30326, -31610, -31358, -31102, -30842, -30578, -30326,
  -28538, -28286, -28030, -27770, -27518, -27258, -27002, -26750,
  -26486, -26226, 13347, 13607, 13863, 14115, 14379, 14639,
  16387, 16647, 16903, 17155, 17415, 17667, 17923, 18183,
  18447, 18699, 17415, 17667, 17923, 18183, 18447, 18699,
  20487, 20739, 20995, 21255, 21507, 21767, 22023, 22275,
  22539, 22799, 21507, 21767, 22023, 22275, 22539, 22799,
  24615, 24867, 25123, 25383, 25635, 25895, 26151, 26403,
  26667, 26927, 25635, 25895, 26151, 26403, 26667, 26927,
  28707, 28967, 29223, 29475, 29735, 29987, 30243, 30503,
  30767, 31019, 29735, 29987, 30243, 30503, 30767, 31019,
  -32637, -32377, -32121, -31869, -31609, -31357, -31101, -30841,
  -30577, -30325, -31609, -31357, -31101, -30841, -30577, -30325,
  -28537, -28285, -28029, -27769, -27517, -27257, -27001, -26749,
  -26485, -26225, -27517, -27257, -27001, -26749, -26485, -26225,
  -24409, -24157, -23901, -23641, -23389, -23129, -22873, -22621,
  -22357, -22097, -23389, -23129, -22873, -22621, -22357, -22097,
  -20317, -20057, -19801, -19549, -19289, -19037, -18781, -18521,
  -18257, -18005, -19289, -19037, -18781, -18521, -18257, -18005,
  -16249, -15997, -15741, -15481, -15229, -14969, -14713, -14461,
  -14197, -13937, -15229, -14969, -14713, -14461, -14197, -13937,
  -12157, -11897, -11641, -11389, -11129, -10877, -10621, -10361,
  -10097, -9845, -11129, -10877, -10621, -10361, -10097, -9845,
  -8029, -7769, -7513, -7261, -7001, -6749, -6493, -6233,
  -5969, -5717, -7001, -6749, -6493, -6233, -5969, -5717,
  -3929, -3677, -3421, -3161, -2909, -2649, -2393, -2141,
  -1877, -1617, -2909, -2649, -2393, -2141, -1877, -1617,
  71, 259, 515, 775, 1027, 1287, 1543, 1795,
  2059, 2319, 1027, 1287, 1543, 1795, 2059, 2319,
  4099, 4359, 4615, 4867, 5127, 5379, 5635, 5895,
  6159, 6411, 5127, 5379, 5635, 5895, 6159, 6411,
  8227, 8487, 8743, 8995, 9255, 9507, 9763, 10023,
  10287, 10539, 9255, 9507, 9763, 10023, 10287, 10539,
  12327, 12579, 12835, 13095, 13347, 13607, 13863, 14115,
  14379, 14639, 13347, 13607, 13863, 14115, 14379, 14639,
  16387, 16647, 16903, 17155, 17415, 17667, 17923, 18183,
  18447, 18699, 17415, 17667, 17923, 18183, 18447, 18699,
  20487, 20739, 20995, 21255, 21507, 21767, 22023, 22275,
  22539, 22799, 21507, 21767, 22023, 22275, 22539, 22799,
  24615, 24867, 25123, 25383, 25635, 25895, 26151, 26403,
  26667, 26927, 25635, 25895, 26151, 26403, 26667, 26927,
  28707, 28967, 29223, 29475, 29735, 29987, 30243, 30503,
  30767, 31019, 29735, 29987, 30243, 30503, 30767, 31019,
  -32637, -32377, -32121, -31869, -31609, -31357, -31101, -30841,
  -30577, -30325, -31609, -31357, -31101, -30841, -30577, -30325,
  -28537, -28285, -28029, -27769, -27517, -27257, -27001, -26749,
  -26485, -26225, -27517, -27257, -27001, -26749, -26485, -26225,
  -1346, -1094, -834, -582, -326, -66, 70, 258,
  514, 774, 1026, 1286, 1542, 1794, 2058, 2318,
  2590, 2842, 3102, 3354, 3610, 3870, 4098, 4358,
  4614, 4866, 5126, 5378, 5634, 5894, 6158, 6410,
  6682, 6942, 7194, 7454, 7710, 7962, 8226, 8486,
  8742, 8994, 9254, 9506, 9762, 10022, 10286, 10538,
  10810, 11070, 11322, 11582, 11838, 12090, 12326, 12578,
  12834, 13094, 13346, 13606, 13862, 14114, 14378, 14638,
  14910, 15162, 15422, 15674, 15930, 16190, 16386, 16646,
  16902, 17154, 17414, 17666, 17922, 18182, 18446, 18698,
  18970, 19230, 19482, 19742, 19998, 20250, 20486, 20738,
  20994, 21254, 21506, 21766, 22022, 22274, 22538, 22798,
  23070, 23322, 23582, 23834, 24090, 24350, 24614, 24866,
  25122, 25382, 25634, 25894, 26150, 26402, 26666, 26926,
  27198, 27450, 27710, 27962, 28218, 28478, 28706, 28966,
  29222, 29474, 29734, 29986, 30242, 30502, 30766, 31018,
  31290, 31550, 31802, 32062, 32318, 32570, -32638, -32378,
  -32122, -31870, -31610, -31358, -31102, -30842, -30578, -30326,
  -30054, -29794, -29542, -29282, -29026, -28774, -28538, -28286,
  -28030, -27770, 13347, 13607, 13863, 14115, 14379, 14639,
  14911, 15163, 15423, 15675, 15931, 16191, 16387, 16647,
  16903, 17155, 17415, 17667, 17923, 18183, 18447, 18699,
  18971, 19231, 19483, 19743, 19999, 20251, 20487, 20739,
  20995, 21255, 21507, 21767, 22023, 22275, 22539, 22799,
  23071, 23323, 23583, 23835, 24091, 24351, 24615, 24867,
  25123, 25383, 25635, 25895, 26151, 26403, 26667, 26927,
  27199, 27451, 27711, 27963, 28219, 28479, 28707, 28967,
  29223, 29475, 29735, 29987, 30243, 30503, 30767, 31019,
  31291, 31551, 31803, 32063, 32319, 32571, -32637, -32377,
  -32121, -31869, -31609, -31357, -31101, -30841, -30577, -30325,
  -30053, -29793, -29541, -29281, -29025, -28773, -28537, -28285,
  -28029, -27769, -27517, -27257, -27001, -26749, -26485, -26225,
  -25953, -25701, -25441, -25189, -24933, -24673, -24409, -24157,
  -23901, -23641, -23389, -23129, -22873, -22621, -22357, -22097,
  -21825, -21573, -21313, -21061, -20805, -20545, -20317, -20057,
  -19801, -19549, -19289, -19037, -18781, -18521, -18257, -18005,
  -17733, -17473, -17221, -16961, -16705, -16453, -16249, -15997,
  -15741, -15481, -15229, -14969, -14713, -14461, -14197, -13937,
  -13665, -13413, -13153, -12901, -12645, -12385, -12157, -11897,
  -11641, -11389, -11129, -10877, -10621, -10361, -10097, -9845,
  -9573, -9313, -9061, -8801, -8545, -8293, -8029, -7769,
  -7513, -7261, -7001, -6749, -6493, -6233, -5969, -5717,
  -5445, -5185, -4933, -4673, -4417, -4165, -3929, -3677,
  -3421, -3161, -2909, -2649, -2393, -2141, -1877, -1617,
  -1345, -1093, -833, -581, -325, -65, 71, 259,
  515, 775, 1027, 1287, 1543, 1795, 2059, 2319,
  2591, 2843, 3103, 3355, 3611, 3871, 4099, 4359,
  4615, 4867, 5127, 5379, 5635, 5895, 6159, 6411,
  6683, 6943, 7195, 7455, 7711, 7963, 8227, 8487,
  8743, 8995, 9255, 9507, 9763, 10023, 10287, 10539,
  10811, 11071, 11323, 11583, 11839, 12091, 12327, 12579,
  12835, 13095, 13347, 13607, 13863, 14115, 14379, 14639,
  14911, 15163, 15423, 15675, 15931, 16191, 16387, 16647,
  16903, 17155, 17415, 17667, 17923, 18183, 18447, 18699,
  18971, 19231, 19483, 19743, 19999, 20251, 20487, 20739,
  20995, 21255, 21507, 21767, 22023, 22275, 22539, 22799,
  23071, 23323, 23583, 23835, 24091, 24351, 24615, 24867,
  25123, 25383, 25635, 25895, 26151, 26403, 26667, 26927,
  27199, 27451, 27711, 27963, 28219, 28479, 28707, 28967,
  29223, 29475, 29735, 29987, 30243, 30503, 30767, 31019,
  31291, 31551, 31803, 32063, 32319, 32571, -32637, -32377,
  -32121, -31869, -31609, -31357, -31101, -30841, -30577, -30325,
  -30053, -29793, -29541, -29281, -29025, -28773, -28537, -28285,
  -28029, -27769, -27517, -27257, -27001, -26749, -26485, -26225
};

static char *mnemonic_xx_cb[256]=
{
 "#","#","#","#","#","#","rlc Y"  ,"#",
 "#","#","#","#","#","#","rrc Y"  ,"#",
 "#","#","#","#","#","#","rl Y"   ,"#",
 "#","#","#","#","#","#","rr Y"   ,"#",
 "#","#","#","#","#","#","sla Y"  ,"#",
 "#","#","#","#","#","#","sra Y"  ,"#",
 "#","#","#","#","#","#","sll Y"  ,"#",
 "#","#","#","#","#","#","srl Y"  ,"#",
 "#","#","#","#","#","#","bit 0,Y","#",
 "#","#","#","#","#","#","bit 1,Y","#",
 "#","#","#","#","#","#","bit 2,Y","#",
 "#","#","#","#","#","#","bit 3,Y","#",
 "#","#","#","#","#","#","bit 4,Y","#",
 "#","#","#","#","#","#","bit 5,Y","#",
 "#","#","#","#","#","#","bit 6,Y","#",
 "#","#","#","#","#","#","bit 7,Y","#",
 "#","#","#","#","#","#","res 0,Y","#",
 "#","#","#","#","#","#","res 1,Y","#",
 "#","#","#","#","#","#","res 2,Y","#",
 "#","#","#","#","#","#","res 3,Y","#",
 "#","#","#","#","#","#","res 4,Y","#",
 "#","#","#","#","#","#","res 5,Y","#",
 "#","#","#","#","#","#","res 6,Y","#",
 "#","#","#","#","#","#","res 7,Y","#",
 "#","#","#","#","#","#","set 0,Y","#",
 "#","#","#","#","#","#","set 1,Y","#",
 "#","#","#","#","#","#","set 2,Y","#",
 "#","#","#","#","#","#","set 3,Y","#",
 "#","#","#","#","#","#","set 4,Y","#",
 "#","#","#","#","#","#","set 5,Y","#",
 "#","#","#","#","#","#","set 6,Y","#",
 "#","#","#","#","#","#","set 7,Y","#"
};

static char *mnemonic_cb[256]=
{
 "rlc b"  ,"rlc c"  ,"rlc d"  ,"rlc e"  ,"rlc h"  ,"rlc l"  ,"rlc (hl)"  ,"rlc a"  ,
 "rrc b"  ,"rrc c"  ,"rrc d"  ,"rrc e"  ,"rrc h"  ,"rrc l"  ,"rrc (hl)"  ,"rrc a"  ,
 "rl b"   ,"rl c"   ,"rl d"   ,"rl e"   ,"rl h"   ,"rl l"   ,"rl (hl)"   ,"rl a"   ,
 "rr b"   ,"rr c"   ,"rr d"   ,"rr e"   ,"rr h"   ,"rr l"   ,"rr (hl)"   ,"rr a"   ,
 "sla b"  ,"sla c"  ,"sla d"  ,"sla e"  ,"sla h"  ,"sla l"  ,"sla (hl)"  ,"sla a"  ,
 "sra b"  ,"sra c"  ,"sra d"  ,"sra e"  ,"sra h"  ,"sra l"  ,"sra (hl)"  ,"sra a"  ,
 "sll b"  ,"sll c"  ,"sll d"  ,"sll e"  ,"sll h"  ,"sll l"  ,"sll (hl)"  ,"sll a"  ,
 "srl b"  ,"srl c"  ,"srl d"  ,"srl e"  ,"srl h"  ,"srl l"  ,"srl (hl)"  ,"srl a"  ,
 "bit 0,b","bit 0,c","bit 0,d","bit 0,e","bit 0,h","bit 0,l","bit 0,(hl)","bit 0,a",
 "bit 1,b","bit 1,c","bit 1,d","bit 1,e","bit 1,h","bit 1,l","bit 1,(hl)","bit 1,a",
 "bit 2,b","bit 2,c","bit 2,d","bit 2,e","bit 2,h","bit 2,l","bit 2,(hl)","bit 2,a",
 "bit 3,b","bit 3,c","bit 3,d","bit 3,e","bit 3,h","bit 3,l","bit 3,(hl)","bit 3,a",
 "bit 4,b","bit 4,c","bit 4,d","bit 4,e","bit 4,h","bit 4,l","bit 4,(hl)","bit 4,a",
 "bit 5,b","bit 5,c","bit 5,d","bit 5,e","bit 5,h","bit 5,l","bit 5,(hl)","bit 5,a",
 "bit 6,b","bit 6,c","bit 6,d","bit 6,e","bit 6,h","bit 6,l","bit 6,(hl)","bit 6,a",
 "bit 7,b","bit 7,c","bit 7,d","bit 7,e","bit 7,h","bit 7,l","bit 7,(hl)","bit 7,a",
 "res 0,b","res 0,c","res 0,d","res 0,e","res 0,h","res 0,l","res 0,(hl)","res 0,a",
 "res 1,b","res 1,c","res 1,d","res 1,e","res 1,h","res 1,l","res 1,(hl)","res 1,a",
 "res 2,b","res 2,c","res 2,d","res 2,e","res 2,h","res 2,l","res 2,(hl)","res 2,a",
 "res 3,b","res 3,c","res 3,d","res 3,e","res 3,h","res 3,l","res 3,(hl)","res 3,a",
 "res 4,b","res 4,c","res 4,d","res 4,e","res 4,h","res 4,l","res 4,(hl)","res 4,a",
 "res 5,b","res 5,c","res 5,d","res 5,e","res 5,h","res 5,l","res 5,(hl)","res 5,a",
 "res 6,b","res 6,c","res 6,d","res 6,e","res 6,h","res 6,l","res 6,(hl)","res 6,a",
 "res 7,b","res 7,c","res 7,d","res 7,e","res 7,h","res 7,l","res 7,(hl)","res 7,a",
 "set 0,b","set 0,c","set 0,d","set 0,e","set 0,h","set 0,l","set 0,(hl)","set 0,a",
 "set 1,b","set 1,c","set 1,d","set 1,e","set 1,h","set 1,l","set 1,(hl)","set 1,a",
 "set 2,b","set 2,c","set 2,d","set 2,e","set 2,h","set 2,l","set 2,(hl)","set 2,a",
 "set 3,b","set 3,c","set 3,d","set 3,e","set 3,h","set 3,l","set 3,(hl)","set 3,a",
 "set 4,b","set 4,c","set 4,d","set 4,e","set 4,h","set 4,l","set 4,(hl)","set 4,a",
 "set 5,b","set 5,c","set 5,d","set 5,e","set 5,h","set 5,l","set 5,(hl)","set 5,a",
 "set 6,b","set 6,c","set 6,d","set 6,e","set 6,h","set 6,l","set 6,(hl)","set 6,a",
 "set 7,b","set 7,c","set 7,d","set 7,e","set 7,h","set 7,l","set 7,(hl)","set 7,a"
};

static char *mnemonic_ed[256]=
{
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "in b,(c)","out (c),b","sbc hl,bc","ld (W),bc","neg","retn","im 0","ld i,a",
 "in c,(c)","out (c),c","adc hl,bc","ld bc,(W)","!"  ,"reti","!"   ,"ld r,a",
 "in d,(c)","out (c),d","sbc hl,de","ld (W),de","!"  ,"!"   ,"im 1","ld a,i",
 "in e,(c)","out (c),e","adc hl,de","ld de,(W)","!"  ,"!"   ,"im 2","ld a,r",
 "in h,(c)","out (c),h","sbc hl,hl","ld (W),hl","!"  ,"!"   ,"!"   ,"rrd"   ,
 "in l,(c)","out (c),l","adc hl,hl","ld hl,(W)","!"  ,"!"   ,"!"   ,"rld"   ,
 "in 0,(c)","out (c),0","sbc hl,sp","ld (W),sp","!"  ,"!"   ,"!"   ,"!"     ,
 "in a,(c)","out (c),a","adc hl,sp","ld sp,(W)","!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "ldi"     ,"cpi"      ,"ini"      ,"outi"     ,"!"  ,"!"   ,"!"   ,"!"     ,
 "ldd"     ,"cpd"      ,"ind"      ,"outd"     ,"!"  ,"!"   ,"!"   ,"!"     ,
 "ldir"    ,"cpir"     ,"inir"     ,"otir"     ,"!"  ,"!"   ,"!"   ,"!"     ,
 "lddr"    ,"cpdr"     ,"indr"     ,"otdr"     ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"     ,
 "!"       ,"!"        ,"!"        ,"!"        ,"!"  ,"!"   ,"!"   ,"!"
};

static char *mnemonic_xx[256]=
{
  "@"      ,"@"       ,"@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"add I,bc","@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"add I,de","@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"ld I,W"  ,"ld (W),I","inc I"    ,"inc Ih"  ,"dec Ih"  ,"ld Ih,B","@"      ,
  "@"      ,"add I,I" ,"ld I,(W)","dec I"    ,"inc Il"  ,"dec Il"  ,"ld Il,B","@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"inc X"   ,"dec X"   ,"ld X,B" ,"@"      ,
  "@"      ,"add I,sp","@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"ld b,Ih" ,"ld b,Il" ,"ld b,X" ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"ld c,Ih" ,"ld c,Il" ,"ld c,X" ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"ld d,Ih" ,"ld d,Il" ,"ld d,X" ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"ld e,Ih" ,"ld e,Il" ,"ld e,X" ,"@"      ,
  "ld Ih,b","ld Ih,c" ,"ld Ih,d" ,"ld Ih,e"  ,"ld Ih,h" ,"ld Ih,l" ,"ld h,X" ,"ld Ih,a",
  "ld Il,b","ld Il,c" ,"ld Il,d" ,"ld Il,e"  ,"ld Il,h" ,"ld Il,l" ,"ld l,X" ,"ld Il,a",
  "ld X,b" ,"ld X,c"  ,"ld X,d"  ,"ld X,e"   ,"ld X,h"  ,"ld X,l"  ,"@"      ,"ld X,a" ,
  "@"      ,"@"       ,"@"       ,"@"        ,"ld a,Ih" ,"ld a,Il" ,"ld a,X" ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"add a,Ih","add a,Il","add a,X","@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"adc a,Ih","adc a,Il","adc a,X","@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"sub Ih"  ,"sub Il"  ,"sub X"  ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"sbc a,Ih","sbc a,Il","sbc a,X","@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"and Ih"  ,"and Il"  ,"and X"  ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"xor Ih"  ,"xor Il"  ,"xor X"  ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"or Ih"   ,"or Il"   ,"or X"   ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"cp Ih"   ,"cp Il"   ,"cp X"   ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"@"       ,"@"       ,"fd cb"    ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"pop I"   ,"@"       ,"ex (sp),I","@"       ,"push I"  ,"@"      ,"@"      ,
  "@"      ,"jp (I)"  ,"@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"@"       ,"@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"      ,
  "@"      ,"ld sp,I" ,"@"       ,"@"        ,"@"       ,"@"       ,"@"      ,"@"
};

static char *mnemonic_main[256]=
{
 "nop"      ,"ld bc,W"  ,"ld (bc),a","inc bc"    ,"inc b"    ,"dec b"    ,"ld b,B"    ,"rlca"     ,
 "ex af,af'","add hl,bc","ld a,(bc)","dec bc"    ,"inc c"    ,"dec c"    ,"ld c,B"    ,"rrca"     ,
 "djnz R"   ,"ld de,W"  ,"ld (de),a","inc de"    ,"inc d"    ,"dec d"    ,"ld d,B"    ,"rla"      ,
 "jr R"     ,"add hl,de","ld a,(de)","dec de"    ,"inc e"    ,"dec e"    ,"ld e,B"    ,"rra"      ,
 "jr nz,R"  ,"ld hl,W"  ,"ld (W),hl","inc hl"    ,"inc h"    ,"dec h"    ,"ld h,B"    ,"daa"      ,
 "jr z,R"   ,"add hl,hl","ld hl,(W)","dec hl"    ,"inc l"    ,"dec l"    ,"ld l,B"    ,"cpl"      ,
 "jr nc,R"  ,"ld sp,W"  ,"ld (W),a" ,"inc sp"    ,"inc (hl)" ,"dec (hl)" ,"ld (hl),B" ,"scf"      ,
 "jr c,R"   ,"add hl,sp","ld a,(W)" ,"dec sp"    ,"inc a"    ,"dec a"    ,"ld a,B"    ,"ccf"      ,
 "ld b,b"   ,"ld b,c"   ,"ld b,d"   ,"ld b,e"    ,"ld b,h"   ,"ld b,l"   ,"ld b,(hl)" ,"ld b,a"   ,
 "ld c,b"   ,"ld c,c"   ,"ld c,d"   ,"ld c,e"    ,"ld c,h"   ,"ld c,l"   ,"ld c,(hl)" ,"ld c,a"   ,
 "ld d,b"   ,"ld d,c"   ,"ld d,d"   ,"ld d,e"    ,"ld d,h"   ,"ld d,l"   ,"ld d,(hl)" ,"ld d,a"   ,
 "ld e,b"   ,"ld e,c"   ,"ld e,d"   ,"ld e,e"    ,"ld e,h"   ,"ld e,l"   ,"ld e,(hl)" ,"ld e,a"   ,
 "ld h,b"   ,"ld h,c"   ,"ld h,d"   ,"ld h,e"    ,"ld h,h"   ,"ld h,l"   ,"ld h,(hl)" ,"ld h,a"   ,
 "ld l,b"   ,"ld l,c"   ,"ld l,d"   ,"ld l,e"    ,"ld l,h"   ,"ld l,l"   ,"ld l,(hl)" ,"ld l,a"   ,
 "ld (hl),b","ld (hl),c","ld (hl),d","ld (hl),e" ,"ld (hl),h","ld (hl),l","halt"      ,"ld (hl),a",
 "ld a,b"   ,"ld a,c"   ,"ld a,d"   ,"ld a,e"    ,"ld a,h"   ,"ld a,l"   ,"ld a,(hl)" ,"ld a,a"   ,
 "add a,b"  ,"add a,c"  ,"add a,d"  ,"add a,e"   ,"add a,h"  ,"add a,l"  ,"add a,(hl)","add a,a"  ,
 "adc a,b"  ,"adc a,c"  ,"adc a,d"  ,"adc a,e"   ,"adc a,h"  ,"adc a,l"  ,"adc a,(hl)","adc a,a"  ,
 "sub b"    ,"sub c"    ,"sub d"    ,"sub e"     ,"sub h"    ,"sub l"    ,"sub (hl)"  ,"sub a"    ,
 "sbc a,b"  ,"sbc a,c"  ,"sbc a,d"  ,"sbc a,e"   ,"sbc a,h"  ,"sbc a,l"  ,"sbc a,(hl)","sbc a,a"  ,
 "and b"    ,"and c"    ,"and d"    ,"and e"     ,"and h"    ,"and l"    ,"and (hl)"  ,"and a"    ,
 "xor b"    ,"xor c"    ,"xor d"    ,"xor e"     ,"xor h"    ,"xor l"    ,"xor (hl)"  ,"xor a"    ,
 "or b"     ,"or c"     ,"or d"     ,"or e"      ,"or h"     ,"or l"     ,"or (hl)"   ,"or a"     ,
 "cp b"     ,"cp c"     ,"cp d"     ,"cp e"      ,"cp h"     ,"cp l"     ,"cp (hl)"   ,"cp a"     ,
 "ret nz"   ,"pop bc"   ,"jp nz,W"  ,"jp W"      ,"call nz,W","push bc"  ,"add a,B"   ,"rst 00h"  ,
 "ret z"    ,"ret"      ,"jp z,W"   ,"cb"        ,"call z,W" ,"call W"   ,"adc a,B"   ,"rst 08h"  ,
 "ret nc"   ,"pop de"   ,"jp nc,W"  ,"out (B),a" ,"call nc,W","push de"  ,"sub B"     ,"rst 10h"  ,
 "ret c"    ,"exx"      ,"jp c,W"   ,"in a,(B)"  ,"call c,W" ,"dd"       ,"sbc a,B"   ,"rst 18h"  ,
 "ret po"   ,"pop hl"   ,"jp po,W"  ,"ex (sp),hl","call po,W","push hl"  ,"and B"     ,"rst 20h"  ,
 "ret pe"   ,"jp (hl)"  ,"jp pe,W"  ,"ex de,hl"  ,"call pe,W","ed"       ,"xor B"     ,"rst 28h"  ,
 "ret p"    ,"pop af"   ,"jp p,W"   ,"di"        ,"call p,W" ,"push af"  ,"or B"      ,"rst 30h"  ,
 "ret m"    ,"ld sp,hl" ,"jp m,W"   ,"ei"        ,"call m,W" ,"fd"       ,"cp B"      ,"rst 38h"
};

z80opcode opcode_dd_cb[256]=
{
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::rlc_xix  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::rrc_xix  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::rl_xix   ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::rr_xix   ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::sla_xix  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::sra_xix  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::sll_xix  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::srl_xix  ,&z80cpu::no_op_xx ,
 &z80cpu::bit_0_xix,&z80cpu::bit_0_xix,&z80cpu::bit_0_xix,&z80cpu::bit_0_xix,&z80cpu::bit_0_xix,&z80cpu::bit_0_xix,&z80cpu::bit_0_xix,&z80cpu::bit_0_xix,
 &z80cpu::bit_1_xix,&z80cpu::bit_1_xix,&z80cpu::bit_1_xix,&z80cpu::bit_1_xix,&z80cpu::bit_1_xix,&z80cpu::bit_1_xix,&z80cpu::bit_1_xix,&z80cpu::bit_1_xix,
 &z80cpu::bit_2_xix,&z80cpu::bit_2_xix,&z80cpu::bit_2_xix,&z80cpu::bit_2_xix,&z80cpu::bit_2_xix,&z80cpu::bit_2_xix,&z80cpu::bit_2_xix,&z80cpu::bit_2_xix,
 &z80cpu::bit_3_xix,&z80cpu::bit_3_xix,&z80cpu::bit_3_xix,&z80cpu::bit_3_xix,&z80cpu::bit_3_xix,&z80cpu::bit_3_xix,&z80cpu::bit_3_xix,&z80cpu::bit_3_xix,
 &z80cpu::bit_4_xix,&z80cpu::bit_4_xix,&z80cpu::bit_4_xix,&z80cpu::bit_4_xix,&z80cpu::bit_4_xix,&z80cpu::bit_4_xix,&z80cpu::bit_4_xix,&z80cpu::bit_4_xix,
 &z80cpu::bit_5_xix,&z80cpu::bit_5_xix,&z80cpu::bit_5_xix,&z80cpu::bit_5_xix,&z80cpu::bit_5_xix,&z80cpu::bit_5_xix,&z80cpu::bit_5_xix,&z80cpu::bit_5_xix,
 &z80cpu::bit_6_xix,&z80cpu::bit_6_xix,&z80cpu::bit_6_xix,&z80cpu::bit_6_xix,&z80cpu::bit_6_xix,&z80cpu::bit_6_xix,&z80cpu::bit_6_xix,&z80cpu::bit_6_xix,
 &z80cpu::bit_7_xix,&z80cpu::bit_7_xix,&z80cpu::bit_7_xix,&z80cpu::bit_7_xix,&z80cpu::bit_7_xix,&z80cpu::bit_7_xix,&z80cpu::bit_7_xix,&z80cpu::bit_7_xix,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_0_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_1_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_2_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_3_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_4_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_5_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_6_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_7_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_0_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_1_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_2_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_3_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_4_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_5_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_6_xix,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_7_xix,&z80cpu::no_op_xx
};

z80opcode opcode_fd_cb[256]=
{
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::rlc_xiy  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::rrc_xiy  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::rl_xiy   ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::rr_xiy   ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::sla_xiy  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::sra_xiy  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::sll_xiy  ,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::srl_xiy  ,&z80cpu::no_op_xx ,
 &z80cpu::bit_0_xiy,&z80cpu::bit_0_xiy,&z80cpu::bit_0_xiy,&z80cpu::bit_0_xiy,&z80cpu::bit_0_xiy,&z80cpu::bit_0_xiy,&z80cpu::bit_0_xiy,&z80cpu::bit_0_xiy,
 &z80cpu::bit_1_xiy,&z80cpu::bit_1_xiy,&z80cpu::bit_1_xiy,&z80cpu::bit_1_xiy,&z80cpu::bit_1_xiy,&z80cpu::bit_1_xiy,&z80cpu::bit_1_xiy,&z80cpu::bit_1_xiy,
 &z80cpu::bit_2_xiy,&z80cpu::bit_2_xiy,&z80cpu::bit_2_xiy,&z80cpu::bit_2_xiy,&z80cpu::bit_2_xiy,&z80cpu::bit_2_xiy,&z80cpu::bit_2_xiy,&z80cpu::bit_2_xiy,
 &z80cpu::bit_3_xiy,&z80cpu::bit_3_xiy,&z80cpu::bit_3_xiy,&z80cpu::bit_3_xiy,&z80cpu::bit_3_xiy,&z80cpu::bit_3_xiy,&z80cpu::bit_3_xiy,&z80cpu::bit_3_xiy,
 &z80cpu::bit_4_xiy,&z80cpu::bit_4_xiy,&z80cpu::bit_4_xiy,&z80cpu::bit_4_xiy,&z80cpu::bit_4_xiy,&z80cpu::bit_4_xiy,&z80cpu::bit_4_xiy,&z80cpu::bit_4_xiy,
 &z80cpu::bit_5_xiy,&z80cpu::bit_5_xiy,&z80cpu::bit_5_xiy,&z80cpu::bit_5_xiy,&z80cpu::bit_5_xiy,&z80cpu::bit_5_xiy,&z80cpu::bit_5_xiy,&z80cpu::bit_5_xiy,
 &z80cpu::bit_6_xiy,&z80cpu::bit_6_xiy,&z80cpu::bit_6_xiy,&z80cpu::bit_6_xiy,&z80cpu::bit_6_xiy,&z80cpu::bit_6_xiy,&z80cpu::bit_6_xiy,&z80cpu::bit_6_xiy,
 &z80cpu::bit_7_xiy,&z80cpu::bit_7_xiy,&z80cpu::bit_7_xiy,&z80cpu::bit_7_xiy,&z80cpu::bit_7_xiy,&z80cpu::bit_7_xiy,&z80cpu::bit_7_xiy,&z80cpu::bit_7_xiy,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_0_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_1_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_2_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_3_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_4_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_5_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_6_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::res_7_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_0_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_1_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_2_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_3_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_4_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_5_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_6_xiy,&z80cpu::no_op_xx ,
 &z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::no_op_xx ,&z80cpu::set_7_xiy,&z80cpu::no_op_xx
};

z80opcode opcode_cb[256]=
{
 &z80cpu::rlc_b  ,&z80cpu::rlc_c  ,&z80cpu::rlc_d  ,&z80cpu::rlc_e  ,&z80cpu::rlc_h  ,&z80cpu::rlc_l  ,&z80cpu::rlc_xhl  ,&z80cpu::rlc_a  ,
 &z80cpu::rrc_b  ,&z80cpu::rrc_c  ,&z80cpu::rrc_d  ,&z80cpu::rrc_e  ,&z80cpu::rrc_h  ,&z80cpu::rrc_l  ,&z80cpu::rrc_xhl  ,&z80cpu::rrc_a  ,
 &z80cpu::rl_b   ,&z80cpu::rl_c   ,&z80cpu::rl_d   ,&z80cpu::rl_e   ,&z80cpu::rl_h   ,&z80cpu::rl_l   ,&z80cpu::rl_xhl   ,&z80cpu::rl_a   ,
 &z80cpu::rr_b   ,&z80cpu::rr_c   ,&z80cpu::rr_d   ,&z80cpu::rr_e   ,&z80cpu::rr_h   ,&z80cpu::rr_l   ,&z80cpu::rr_xhl   ,&z80cpu::rr_a   ,
 &z80cpu::sla_b  ,&z80cpu::sla_c  ,&z80cpu::sla_d  ,&z80cpu::sla_e  ,&z80cpu::sla_h  ,&z80cpu::sla_l  ,&z80cpu::sla_xhl  ,&z80cpu::sla_a  ,
 &z80cpu::sra_b  ,&z80cpu::sra_c  ,&z80cpu::sra_d  ,&z80cpu::sra_e  ,&z80cpu::sra_h  ,&z80cpu::sra_l  ,&z80cpu::sra_xhl  ,&z80cpu::sra_a  ,
 &z80cpu::sll_b  ,&z80cpu::sll_c  ,&z80cpu::sll_d  ,&z80cpu::sll_e  ,&z80cpu::sll_h  ,&z80cpu::sll_l  ,&z80cpu::sll_xhl  ,&z80cpu::sll_a  ,
 &z80cpu::srl_b  ,&z80cpu::srl_c  ,&z80cpu::srl_d  ,&z80cpu::srl_e  ,&z80cpu::srl_h  ,&z80cpu::srl_l  ,&z80cpu::srl_xhl  ,&z80cpu::srl_a  ,
 &z80cpu::bit_0_b,&z80cpu::bit_0_c,&z80cpu::bit_0_d,&z80cpu::bit_0_e,&z80cpu::bit_0_h,&z80cpu::bit_0_l,&z80cpu::bit_0_xhl,&z80cpu::bit_0_a,
 &z80cpu::bit_1_b,&z80cpu::bit_1_c,&z80cpu::bit_1_d,&z80cpu::bit_1_e,&z80cpu::bit_1_h,&z80cpu::bit_1_l,&z80cpu::bit_1_xhl,&z80cpu::bit_1_a,
 &z80cpu::bit_2_b,&z80cpu::bit_2_c,&z80cpu::bit_2_d,&z80cpu::bit_2_e,&z80cpu::bit_2_h,&z80cpu::bit_2_l,&z80cpu::bit_2_xhl,&z80cpu::bit_2_a,
 &z80cpu::bit_3_b,&z80cpu::bit_3_c,&z80cpu::bit_3_d,&z80cpu::bit_3_e,&z80cpu::bit_3_h,&z80cpu::bit_3_l,&z80cpu::bit_3_xhl,&z80cpu::bit_3_a,
 &z80cpu::bit_4_b,&z80cpu::bit_4_c,&z80cpu::bit_4_d,&z80cpu::bit_4_e,&z80cpu::bit_4_h,&z80cpu::bit_4_l,&z80cpu::bit_4_xhl,&z80cpu::bit_4_a,
 &z80cpu::bit_5_b,&z80cpu::bit_5_c,&z80cpu::bit_5_d,&z80cpu::bit_5_e,&z80cpu::bit_5_h,&z80cpu::bit_5_l,&z80cpu::bit_5_xhl,&z80cpu::bit_5_a,
 &z80cpu::bit_6_b,&z80cpu::bit_6_c,&z80cpu::bit_6_d,&z80cpu::bit_6_e,&z80cpu::bit_6_h,&z80cpu::bit_6_l,&z80cpu::bit_6_xhl,&z80cpu::bit_6_a,
 &z80cpu::bit_7_b,&z80cpu::bit_7_c,&z80cpu::bit_7_d,&z80cpu::bit_7_e,&z80cpu::bit_7_h,&z80cpu::bit_7_l,&z80cpu::bit_7_xhl,&z80cpu::bit_7_a,
 &z80cpu::res_0_b,&z80cpu::res_0_c,&z80cpu::res_0_d,&z80cpu::res_0_e,&z80cpu::res_0_h,&z80cpu::res_0_l,&z80cpu::res_0_xhl,&z80cpu::res_0_a,
 &z80cpu::res_1_b,&z80cpu::res_1_c,&z80cpu::res_1_d,&z80cpu::res_1_e,&z80cpu::res_1_h,&z80cpu::res_1_l,&z80cpu::res_1_xhl,&z80cpu::res_1_a,
 &z80cpu::res_2_b,&z80cpu::res_2_c,&z80cpu::res_2_d,&z80cpu::res_2_e,&z80cpu::res_2_h,&z80cpu::res_2_l,&z80cpu::res_2_xhl,&z80cpu::res_2_a,
 &z80cpu::res_3_b,&z80cpu::res_3_c,&z80cpu::res_3_d,&z80cpu::res_3_e,&z80cpu::res_3_h,&z80cpu::res_3_l,&z80cpu::res_3_xhl,&z80cpu::res_3_a,
 &z80cpu::res_4_b,&z80cpu::res_4_c,&z80cpu::res_4_d,&z80cpu::res_4_e,&z80cpu::res_4_h,&z80cpu::res_4_l,&z80cpu::res_4_xhl,&z80cpu::res_4_a,
 &z80cpu::res_5_b,&z80cpu::res_5_c,&z80cpu::res_5_d,&z80cpu::res_5_e,&z80cpu::res_5_h,&z80cpu::res_5_l,&z80cpu::res_5_xhl,&z80cpu::res_5_a,
 &z80cpu::res_6_b,&z80cpu::res_6_c,&z80cpu::res_6_d,&z80cpu::res_6_e,&z80cpu::res_6_h,&z80cpu::res_6_l,&z80cpu::res_6_xhl,&z80cpu::res_6_a,
 &z80cpu::res_7_b,&z80cpu::res_7_c,&z80cpu::res_7_d,&z80cpu::res_7_e,&z80cpu::res_7_h,&z80cpu::res_7_l,&z80cpu::res_7_xhl,&z80cpu::res_7_a,
 &z80cpu::set_0_b,&z80cpu::set_0_c,&z80cpu::set_0_d,&z80cpu::set_0_e,&z80cpu::set_0_h,&z80cpu::set_0_l,&z80cpu::set_0_xhl,&z80cpu::set_0_a,
 &z80cpu::set_1_b,&z80cpu::set_1_c,&z80cpu::set_1_d,&z80cpu::set_1_e,&z80cpu::set_1_h,&z80cpu::set_1_l,&z80cpu::set_1_xhl,&z80cpu::set_1_a,
 &z80cpu::set_2_b,&z80cpu::set_2_c,&z80cpu::set_2_d,&z80cpu::set_2_e,&z80cpu::set_2_h,&z80cpu::set_2_l,&z80cpu::set_2_xhl,&z80cpu::set_2_a,
 &z80cpu::set_3_b,&z80cpu::set_3_c,&z80cpu::set_3_d,&z80cpu::set_3_e,&z80cpu::set_3_h,&z80cpu::set_3_l,&z80cpu::set_3_xhl,&z80cpu::set_3_a,
 &z80cpu::set_4_b,&z80cpu::set_4_c,&z80cpu::set_4_d,&z80cpu::set_4_e,&z80cpu::set_4_h,&z80cpu::set_4_l,&z80cpu::set_4_xhl,&z80cpu::set_4_a,
 &z80cpu::set_5_b,&z80cpu::set_5_c,&z80cpu::set_5_d,&z80cpu::set_5_e,&z80cpu::set_5_h,&z80cpu::set_5_l,&z80cpu::set_5_xhl,&z80cpu::set_5_a,
 &z80cpu::set_6_b,&z80cpu::set_6_c,&z80cpu::set_6_d,&z80cpu::set_6_e,&z80cpu::set_6_h,&z80cpu::set_6_l,&z80cpu::set_6_xhl,&z80cpu::set_6_a,
 &z80cpu::set_7_b,&z80cpu::set_7_c,&z80cpu::set_7_d,&z80cpu::set_7_e,&z80cpu::set_7_h,&z80cpu::set_7_l,&z80cpu::set_7_xhl,&z80cpu::set_7_a
};

z80opcode opcode_dd[256]=
{
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::add_ix_bc ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::add_ix_de ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::ld_ix_word,&z80cpu::ld_xword_ix,&z80cpu::inc_ix   ,&z80cpu::inc_ixh    ,&z80cpu::dec_ixh    ,&z80cpu::ld_ixh_byte,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::add_ix_ix ,&z80cpu::ld_ix_xword,&z80cpu::dec_ix   ,&z80cpu::inc_ixl    ,&z80cpu::dec_ixl    ,&z80cpu::ld_ixl_byte,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::inc_xix    ,&z80cpu::dec_xix    ,&z80cpu::ld_xix_byte,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::add_ix_sp ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_b_ixh   ,&z80cpu::ld_b_ixl   ,&z80cpu::ld_b_xix   ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_c_ixh   ,&z80cpu::ld_c_ixl   ,&z80cpu::ld_c_xix   ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_d_ixh   ,&z80cpu::ld_d_ixl   ,&z80cpu::ld_d_xix   ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_e_ixh   ,&z80cpu::ld_e_ixl   ,&z80cpu::ld_e_xix   ,&z80cpu::no_op   ,
  &z80cpu::ld_ixh_b,&z80cpu::ld_ixh_c  ,&z80cpu::ld_ixh_d   ,&z80cpu::ld_ixh_e ,&z80cpu::ld_ixh_ixh ,&z80cpu::ld_ixh_ixl ,&z80cpu::ld_h_xix   ,&z80cpu::ld_ixh_a,
  &z80cpu::ld_ixl_b,&z80cpu::ld_ixl_c  ,&z80cpu::ld_ixl_d   ,&z80cpu::ld_ixl_e ,&z80cpu::ld_ixl_ixh ,&z80cpu::ld_ixl_ixl ,&z80cpu::ld_l_xix   ,&z80cpu::ld_ixl_a,
  &z80cpu::ld_xix_b,&z80cpu::ld_xix_c  ,&z80cpu::ld_xix_d   ,&z80cpu::ld_xix_e ,&z80cpu::ld_xix_h   ,&z80cpu::ld_xix_l   ,&z80cpu::no_op      ,&z80cpu::ld_xix_a,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_a_ixh   ,&z80cpu::ld_a_ixl   ,&z80cpu::ld_a_xix   ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::add_a_ixh  ,&z80cpu::add_a_ixl  ,&z80cpu::add_a_xix  ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::adc_a_ixh  ,&z80cpu::adc_a_ixl  ,&z80cpu::adc_a_xix  ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::sub_ixh    ,&z80cpu::sub_ixl    ,&z80cpu::sub_xix    ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::sbc_a_ixh  ,&z80cpu::sbc_a_ixl  ,&z80cpu::sbc_a_xix  ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::and_ixh    ,&z80cpu::and_ixl    ,&z80cpu::and_xix    ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::xor_ixh    ,&z80cpu::xor_ixl    ,&z80cpu::xor_xix    ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::or_ixh     ,&z80cpu::or_ixl     ,&z80cpu::or_xix     ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::cp_ixh     ,&z80cpu::cp_ixl     ,&z80cpu::cp_xix     ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::dd_cb    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::pop_ix    ,&z80cpu::no_op      ,&z80cpu::ex_xsp_ix,&z80cpu::no_op      ,&z80cpu::push_ix    ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::jp_ix     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::ld_sp_ix  ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op
};

z80opcode opcode_ed[256]=
{
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::in_b_c,&z80cpu::out_c_b,&z80cpu::sbc_hl_bc,&z80cpu::ld_xword_bc,&z80cpu::neg,&z80cpu::retn,&z80cpu::im_0 ,&z80cpu::ld_i_a,
 &z80cpu::in_c_c,&z80cpu::out_c_c,&z80cpu::adc_hl_bc,&z80cpu::ld_bc_xword,&z80cpu::neg,&z80cpu::reti,&z80cpu::im_0 ,&z80cpu::ld_r_a,
 &z80cpu::in_d_c,&z80cpu::out_c_d,&z80cpu::sbc_hl_de,&z80cpu::ld_xword_de,&z80cpu::neg,&z80cpu::retn,&z80cpu::im_1 ,&z80cpu::ld_a_i,
 &z80cpu::in_e_c,&z80cpu::out_c_e,&z80cpu::adc_hl_de,&z80cpu::ld_de_xword,&z80cpu::neg,&z80cpu::reti,&z80cpu::im_2 ,&z80cpu::ld_a_r,
 &z80cpu::in_h_c,&z80cpu::out_c_h,&z80cpu::sbc_hl_hl,&z80cpu::ld_xword_hl,&z80cpu::neg,&z80cpu::retn,&z80cpu::im_0 ,&z80cpu::rrd   ,
 &z80cpu::in_l_c,&z80cpu::out_c_l,&z80cpu::adc_hl_hl,&z80cpu::ld_hl_xword,&z80cpu::neg,&z80cpu::reti,&z80cpu::im_0 ,&z80cpu::rld   ,
 &z80cpu::in_0_c,&z80cpu::out_c_0,&z80cpu::sbc_hl_sp,&z80cpu::ld_xword_sp,&z80cpu::neg,&z80cpu::retn,&z80cpu::im_1 ,&z80cpu::nop   ,
 &z80cpu::in_a_c,&z80cpu::out_c_a,&z80cpu::adc_hl_sp,&z80cpu::ld_sp_xword,&z80cpu::neg,&z80cpu::reti,&z80cpu::im_2 ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::ldi   ,&z80cpu::cpi    ,&z80cpu::ini      ,&z80cpu::outi       ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::ldd   ,&z80cpu::cpd    ,&z80cpu::ind      ,&z80cpu::outd       ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::ldir  ,&z80cpu::cpir   ,&z80cpu::inir     ,&z80cpu::otir       ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::lddr  ,&z80cpu::cpdr   ,&z80cpu::indr     ,&z80cpu::otdr       ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::nop  ,&z80cpu::nop   ,
 &z80cpu::nop   ,&z80cpu::nop    ,&z80cpu::nop      ,&z80cpu::nop        ,&z80cpu::nop,&z80cpu::nop ,&z80cpu::patch,&z80cpu::nop
};

z80opcode opcode_fd[256]=
{
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::add_iy_bc ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::add_iy_de ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::ld_iy_word,&z80cpu::ld_xword_iy,&z80cpu::inc_iy   ,&z80cpu::inc_iyh    ,&z80cpu::dec_iyh    ,&z80cpu::ld_iyh_byte,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::add_iy_iy ,&z80cpu::ld_iy_xword,&z80cpu::dec_iy   ,&z80cpu::inc_iyl    ,&z80cpu::dec_iyl    ,&z80cpu::ld_iyl_byte,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::inc_xiy    ,&z80cpu::dec_xiy    ,&z80cpu::ld_xiy_byte,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::add_iy_sp ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_b_iyh   ,&z80cpu::ld_b_iyl   ,&z80cpu::ld_b_xiy   ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_c_iyh   ,&z80cpu::ld_c_iyl   ,&z80cpu::ld_c_xiy   ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_d_iyh   ,&z80cpu::ld_d_iyl   ,&z80cpu::ld_d_xiy   ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_e_iyh   ,&z80cpu::ld_e_iyl   ,&z80cpu::ld_e_xiy   ,&z80cpu::no_op   ,
  &z80cpu::ld_iyh_b,&z80cpu::ld_iyh_c  ,&z80cpu::ld_iyh_d   ,&z80cpu::ld_iyh_e ,&z80cpu::ld_iyh_iyh ,&z80cpu::ld_iyh_iyl ,&z80cpu::ld_h_xiy   ,&z80cpu::ld_iyh_a,
  &z80cpu::ld_iyl_b,&z80cpu::ld_iyl_c  ,&z80cpu::ld_iyl_d   ,&z80cpu::ld_iyl_e ,&z80cpu::ld_iyl_iyh ,&z80cpu::ld_iyl_iyl ,&z80cpu::ld_l_xiy   ,&z80cpu::ld_iyl_a,
  &z80cpu::ld_xiy_b,&z80cpu::ld_xiy_c  ,&z80cpu::ld_xiy_d   ,&z80cpu::ld_xiy_e ,&z80cpu::ld_xiy_h   ,&z80cpu::ld_xiy_l   ,&z80cpu::no_op      ,&z80cpu::ld_xiy_a,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::ld_a_iyh   ,&z80cpu::ld_a_iyl   ,&z80cpu::ld_a_xiy   ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::add_a_iyh  ,&z80cpu::add_a_iyl  ,&z80cpu::add_a_xiy  ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::adc_a_iyh  ,&z80cpu::adc_a_iyl  ,&z80cpu::adc_a_xiy  ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::sub_iyh    ,&z80cpu::sub_iyl    ,&z80cpu::sub_xiy    ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::sbc_a_iyh  ,&z80cpu::sbc_a_iyl  ,&z80cpu::sbc_a_xiy  ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::and_iyh    ,&z80cpu::and_iyl    ,&z80cpu::and_xiy    ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::xor_iyh    ,&z80cpu::xor_iyl    ,&z80cpu::xor_xiy    ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::or_iyh     ,&z80cpu::or_iyl     ,&z80cpu::or_xiy     ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::cp_iyh     ,&z80cpu::cp_iyl     ,&z80cpu::cp_xiy     ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::fd_cb    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::pop_iy    ,&z80cpu::no_op      ,&z80cpu::ex_xsp_iy,&z80cpu::no_op      ,&z80cpu::push_iy    ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::jp_iy     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::no_op     ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op   ,
  &z80cpu::no_op   ,&z80cpu::ld_sp_iy  ,&z80cpu::no_op      ,&z80cpu::no_op    ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op      ,&z80cpu::no_op
};

z80opcode opcode_main[256]=
{
 &z80cpu::nop     ,&z80cpu::ld_bc_word,&z80cpu::ld_xbc_a   ,&z80cpu::inc_bc    ,&z80cpu::inc_b   ,&z80cpu::dec_b   ,&z80cpu::ld_b_byte  ,&z80cpu::rlca    ,
 &z80cpu::ex_af_af,&z80cpu::add_hl_bc ,&z80cpu::ld_a_xbc   ,&z80cpu::dec_bc    ,&z80cpu::inc_c   ,&z80cpu::dec_c   ,&z80cpu::ld_c_byte  ,&z80cpu::rrca    ,
 &z80cpu::djnz    ,&z80cpu::ld_de_word,&z80cpu::ld_xde_a   ,&z80cpu::inc_de    ,&z80cpu::inc_d   ,&z80cpu::dec_d   ,&z80cpu::ld_d_byte  ,&z80cpu::rla     ,
 &z80cpu::jr      ,&z80cpu::add_hl_de ,&z80cpu::ld_a_xde   ,&z80cpu::dec_de    ,&z80cpu::inc_e   ,&z80cpu::dec_e   ,&z80cpu::ld_e_byte  ,&z80cpu::rra     ,
 &z80cpu::jr_nz   ,&z80cpu::ld_hl_word,&z80cpu::ld_xword_hl,&z80cpu::inc_hl    ,&z80cpu::inc_h   ,&z80cpu::dec_h   ,&z80cpu::ld_h_byte  ,&z80cpu::daa     ,
 &z80cpu::jr_z    ,&z80cpu::add_hl_hl ,&z80cpu::ld_hl_xword,&z80cpu::dec_hl    ,&z80cpu::inc_l   ,&z80cpu::dec_l   ,&z80cpu::ld_l_byte  ,&z80cpu::cpl     ,
 &z80cpu::jr_nc   ,&z80cpu::ld_sp_word,&z80cpu::ld_xbyte_a ,&z80cpu::inc_sp    ,&z80cpu::inc_xhl ,&z80cpu::dec_xhl ,&z80cpu::ld_xhl_byte,&z80cpu::scf     ,
 &z80cpu::jr_c    ,&z80cpu::add_hl_sp ,&z80cpu::ld_a_xbyte ,&z80cpu::dec_sp    ,&z80cpu::inc_a   ,&z80cpu::dec_a   ,&z80cpu::ld_a_byte  ,&z80cpu::ccf     ,
 &z80cpu::ld_b_b  ,&z80cpu::ld_b_c    ,&z80cpu::ld_b_d     ,&z80cpu::ld_b_e    ,&z80cpu::ld_b_h  ,&z80cpu::ld_b_l  ,&z80cpu::ld_b_xhl   ,&z80cpu::ld_b_a  ,
 &z80cpu::ld_c_b  ,&z80cpu::ld_c_c    ,&z80cpu::ld_c_d     ,&z80cpu::ld_c_e    ,&z80cpu::ld_c_h  ,&z80cpu::ld_c_l  ,&z80cpu::ld_c_xhl   ,&z80cpu::ld_c_a  ,
 &z80cpu::ld_d_b  ,&z80cpu::ld_d_c    ,&z80cpu::ld_d_d     ,&z80cpu::ld_d_e    ,&z80cpu::ld_d_h  ,&z80cpu::ld_d_l  ,&z80cpu::ld_d_xhl   ,&z80cpu::ld_d_a  ,
 &z80cpu::ld_e_b  ,&z80cpu::ld_e_c    ,&z80cpu::ld_e_d     ,&z80cpu::ld_e_e    ,&z80cpu::ld_e_h  ,&z80cpu::ld_e_l  ,&z80cpu::ld_e_xhl   ,&z80cpu::ld_e_a  ,
 &z80cpu::ld_h_b  ,&z80cpu::ld_h_c    ,&z80cpu::ld_h_d     ,&z80cpu::ld_h_e    ,&z80cpu::ld_h_h  ,&z80cpu::ld_h_l  ,&z80cpu::ld_h_xhl   ,&z80cpu::ld_h_a  ,
 &z80cpu::ld_l_b  ,&z80cpu::ld_l_c    ,&z80cpu::ld_l_d     ,&z80cpu::ld_l_e    ,&z80cpu::ld_l_h  ,&z80cpu::ld_l_l  ,&z80cpu::ld_l_xhl   ,&z80cpu::ld_l_a  ,
 &z80cpu::ld_xhl_b,&z80cpu::ld_xhl_c  ,&z80cpu::ld_xhl_d   ,&z80cpu::ld_xhl_e  ,&z80cpu::ld_xhl_h,&z80cpu::ld_xhl_l,&z80cpu::halt       ,&z80cpu::ld_xhl_a,
 &z80cpu::ld_a_b  ,&z80cpu::ld_a_c    ,&z80cpu::ld_a_d     ,&z80cpu::ld_a_e    ,&z80cpu::ld_a_h  ,&z80cpu::ld_a_l  ,&z80cpu::ld_a_xhl   ,&z80cpu::ld_a_a  ,
 &z80cpu::add_a_b ,&z80cpu::add_a_c   ,&z80cpu::add_a_d    ,&z80cpu::add_a_e   ,&z80cpu::add_a_h ,&z80cpu::add_a_l ,&z80cpu::add_a_xhl  ,&z80cpu::add_a_a ,
 &z80cpu::adc_a_b ,&z80cpu::adc_a_c   ,&z80cpu::adc_a_d    ,&z80cpu::adc_a_e   ,&z80cpu::adc_a_h ,&z80cpu::adc_a_l ,&z80cpu::adc_a_xhl  ,&z80cpu::adc_a_a ,
 &z80cpu::sub_b   ,&z80cpu::sub_c     ,&z80cpu::sub_d      ,&z80cpu::sub_e     ,&z80cpu::sub_h   ,&z80cpu::sub_l   ,&z80cpu::sub_xhl    ,&z80cpu::sub_a   ,
 &z80cpu::sbc_a_b ,&z80cpu::sbc_a_c   ,&z80cpu::sbc_a_d    ,&z80cpu::sbc_a_e   ,&z80cpu::sbc_a_h ,&z80cpu::sbc_a_l ,&z80cpu::sbc_a_xhl  ,&z80cpu::sbc_a_a ,
 &z80cpu::and_b   ,&z80cpu::and_c     ,&z80cpu::and_d      ,&z80cpu::and_e     ,&z80cpu::and_h   ,&z80cpu::and_l   ,&z80cpu::and_xhl    ,&z80cpu::and_a   ,
 &z80cpu::xor_b   ,&z80cpu::xor_c     ,&z80cpu::xor_d      ,&z80cpu::xor_e     ,&z80cpu::xor_h   ,&z80cpu::xor_l   ,&z80cpu::xor_xhl    ,&z80cpu::xor_a   ,
 &z80cpu::or_b    ,&z80cpu::or_c      ,&z80cpu::or_d       ,&z80cpu::or_e      ,&z80cpu::or_h    ,&z80cpu::or_l    ,&z80cpu::or_xhl     ,&z80cpu::or_a    ,
 &z80cpu::cp_b    ,&z80cpu::cp_c      ,&z80cpu::cp_d       ,&z80cpu::cp_e      ,&z80cpu::cp_h    ,&z80cpu::cp_l    ,&z80cpu::cp_xhl     ,&z80cpu::cp_a    ,
 &z80cpu::ret_nz  ,&z80cpu::pop_bc    ,&z80cpu::jp_nz      ,&z80cpu::jp        ,&z80cpu::call_nz ,&z80cpu::push_bc ,&z80cpu::add_a_byte ,&z80cpu::rst_00  ,
 &z80cpu::ret_z   ,&z80cpu::ret       ,&z80cpu::jp_z       ,&z80cpu::cb        ,&z80cpu::call_z  ,&z80cpu::call    ,&z80cpu::adc_a_byte ,&z80cpu::rst_08  ,
 &z80cpu::ret_nc  ,&z80cpu::pop_de    ,&z80cpu::jp_nc      ,&z80cpu::out_byte_a,&z80cpu::call_nc ,&z80cpu::push_de ,&z80cpu::sub_byte   ,&z80cpu::rst_10  ,
 &z80cpu::ret_c   ,&z80cpu::exx       ,&z80cpu::jp_c       ,&z80cpu::in_a_byte ,&z80cpu::call_c  ,&z80cpu::dd      ,&z80cpu::sbc_a_byte ,&z80cpu::rst_18  ,
 &z80cpu::ret_po  ,&z80cpu::pop_hl    ,&z80cpu::jp_po      ,&z80cpu::ex_xsp_hl ,&z80cpu::call_po ,&z80cpu::push_hl ,&z80cpu::and_byte   ,&z80cpu::rst_20  ,
 &z80cpu::ret_pe  ,&z80cpu::jp_hl     ,&z80cpu::jp_pe      ,&z80cpu::ex_de_hl  ,&z80cpu::call_pe ,&z80cpu::ed      ,&z80cpu::xor_byte   ,&z80cpu::rst_28  ,
 &z80cpu::ret_p   ,&z80cpu::pop_af    ,&z80cpu::jp_p       ,&z80cpu::di        ,&z80cpu::call_p  ,&z80cpu::push_af ,&z80cpu::or_byte    ,&z80cpu::rst_30  ,
 &z80cpu::ret_m   ,&z80cpu::ld_sp_hl  ,&z80cpu::jp_m       ,&z80cpu::ei        ,&z80cpu::call_m  ,&z80cpu::fd      ,&z80cpu::cp_byte    ,&z80cpu::rst_38
};

#define M_C     (R.AF.B.l&C_FLAG)
#define M_NC    (!M_C)
#define M_Z     (R.AF.B.l&Z_FLAG)
#define M_NZ    (!M_Z)
#define M_M     (R.AF.B.l&S_FLAG)
#define M_P     (!M_M)
#define M_PE    (R.AF.B.l&V_FLAG)
#define M_PO    (!M_PE)

/* Get next opcode argument and increment program counter */
unsigned z80cpu::M_RDMEM_OPCODE (void)
{
 unsigned retval;
 retval=M_RDOP_ARG(R.PC.D);
 R.PC.W.l++;
 return retval;
}

unsigned z80cpu::M_RDMEM_WORD (dword A)
{
 int i;
 i=M_RDMEM(A);
 i+=M_RDMEM(((A)+1)&0xFFFF)<<8;
 return i;
}

void z80cpu::M_WRMEM_WORD (dword A,word V)
{
 M_WRMEM (A,V&255);
 M_WRMEM (((A)+1)&0xFFFF,V>>8);
}

unsigned z80cpu::M_RDMEM_OPCODE_WORD (void)
{
 int i;
 i=M_RDMEM_OPCODE();
 i+=M_RDMEM_OPCODE()<<8;
 return i;
}

#define M_XIX       ((R.IX.D+(offset)M_RDMEM_OPCODE())&0xFFFF)
#define M_XIY       ((R.IY.D+(offset)M_RDMEM_OPCODE())&0xFFFF)
#define M_RD_XHL    M_RDMEM(R.HL.D)

unsigned z80cpu::M_RD_XIX(void)
{
 int i;
 i=M_XIX;
 return M_RDMEM(i);
}

unsigned z80cpu::M_RD_XIY(void)
{
 int i;
 i=M_XIY;
 return M_RDMEM(i);
}

void z80cpu::M_WR_XIX(byte a)
{
 int i;
 i=M_XIX;
 M_WRMEM(i,a);
}

void z80cpu::M_WR_XIY(byte a)
{
 int i;
 i=M_XIY;
 M_WRMEM(i,a);
}

#define M_POP(Rg)           \
        R.Rg.D=M_RDSTACK(R.SP.D)+(M_RDSTACK((R.SP.D+1)&65535)<<8); \
        R.SP.W.l+=2
#define M_PUSH(Rg)          \
        R.SP.W.l-=2;        \
        M_WRSTACK(R.SP.D,R.Rg.D); \
        M_WRSTACK((R.SP.D+1)&65535,R.Rg.D>>8)
#define M_CALL              \
{                           \
 int q;                     \
 q=M_RDMEM_OPCODE_WORD();   \
 M_PUSH(PC);                \
 R.PC.D=q;                  \
 Z80_ICount-=7;             \
}
#define M_JP                \
        R.PC.D=M_RDOP_ARG(R.PC.D)+((M_RDOP_ARG((R.PC.D+1)&65535))<<8)
#define M_JR                \
        R.PC.W.l+=((offset)M_RDOP_ARG(R.PC.D))+1; Z80_ICount-=5
#define M_RET           M_POP(PC); Z80_ICount-=6
#define M_RST(Addr)     M_PUSH(PC); R.PC.D=Addr
#define M_SET(Bit,Reg)  Reg|=1<<Bit
#define M_RES(Bit,Reg)  Reg&=~(1<<Bit)
#define M_BIT(Bit,Reg)      \
        R.AF.B.l=(R.AF.B.l&C_FLAG)|H_FLAG| \
        ((Reg&(1<<Bit))? ((Bit==7)?S_FLAG:0):Z_FLAG)
#define M_AND(Reg)      R.AF.B.h&=Reg; R.AF.B.l=ZSPTable[R.AF.B.h]|H_FLAG
#define M_OR(Reg)       R.AF.B.h|=Reg; R.AF.B.l=ZSPTable[R.AF.B.h]
#define M_XOR(Reg)      R.AF.B.h^=Reg; R.AF.B.l=ZSPTable[R.AF.B.h]
#define M_IN(Reg)           \
        Reg=DoIn(R.BC.B.l,R.BC.B.h); \
        R.AF.B.l=(R.AF.B.l&C_FLAG)|ZSPTable[Reg]

#define M_RLCA              \
 R.AF.B.h=(R.AF.B.h<<1)|((R.AF.B.h&0x80)>>7); \
 R.AF.B.l=(R.AF.B.l&0xEC)|(R.AF.B.h&C_FLAG)

#define M_RRCA              \
 R.AF.B.l=(R.AF.B.l&0xEC)|(R.AF.B.h&0x01); \
 R.AF.B.h=(R.AF.B.h>>1)|(R.AF.B.h<<7)

#define M_RLA               \
{                           \
 int i;                     \
 i=R.AF.B.l&C_FLAG;         \
 R.AF.B.l=(R.AF.B.l&0xEC)|((R.AF.B.h&0x80)>>7); \
 R.AF.B.h=(R.AF.B.h<<1)|i;  \
}

#define M_RRA               \
{                           \
 int i;                     \
 i=R.AF.B.l&C_FLAG;         \
 R.AF.B.l=(R.AF.B.l&0xEC)|(R.AF.B.h&0x01); \
 R.AF.B.h=(R.AF.B.h>>1)|(i<<7);            \
}

#define M_RLC(Reg)         \
{                          \
 int q;                    \
 q=Reg>>7;                 \
 Reg=(Reg<<1)|q;           \
 R.AF.B.l=ZSPTable[Reg]|q; \
}
#define M_RRC(Reg)         \
{                          \
 int q;                    \
 q=Reg&1;                  \
 Reg=(Reg>>1)|(q<<7);      \
 R.AF.B.l=ZSPTable[Reg]|q; \
}
#define M_RL(Reg)            \
{                            \
 int q;                      \
 q=Reg>>7;                   \
 Reg=(Reg<<1)|(R.AF.B.l&1);  \
 R.AF.B.l=ZSPTable[Reg]|q;   \
}
#define M_RR(Reg)            \
{                            \
 int q;                      \
 q=Reg&1;                    \
 Reg=(Reg>>1)|(R.AF.B.l<<7); \
 R.AF.B.l=ZSPTable[Reg]|q;   \
}
#define M_SLL(Reg)           \
{                            \
 int q;                      \
 q=Reg>>7;                   \
 Reg=(Reg<<1)|1;             \
 R.AF.B.l=ZSPTable[Reg]|q;   \
}
#define M_SLA(Reg)           \
{                            \
 int q;                      \
 q=Reg>>7;                   \
 Reg<<=1;                    \
 R.AF.B.l=ZSPTable[Reg]|q;   \
}
#define M_SRL(Reg)           \
{                            \
 int q;                      \
 q=Reg&1;                    \
 Reg>>=1;                    \
 R.AF.B.l=ZSPTable[Reg]|q;   \
}
#define M_SRA(Reg)           \
{                            \
 int q;                      \
 q=Reg&1;                    \
 Reg=(Reg>>1)|(Reg&0x80);    \
 R.AF.B.l=ZSPTable[Reg]|q;   \
}

#define M_INC(Reg)                                      \
 ++Reg;                                                 \
 R.AF.B.l=(R.AF.B.l&C_FLAG)|ZSTable[Reg]|               \
          ((Reg==0x80)?V_FLAG:0)|((Reg&0x0F)?0:H_FLAG)

#define M_DEC(Reg)                                      \
 R.AF.B.l=(R.AF.B.l&C_FLAG)|N_FLAG|                     \
          ((Reg==0x80)?V_FLAG:0)|((Reg&0x0F)?0:H_FLAG); \
 R.AF.B.l|=ZSTable[--Reg]

#define M_ADD(Reg)                                      \
{                                                       \
 int q;                                                 \
 q=R.AF.B.h+Reg;                                        \
 R.AF.B.l=ZSTable[q&255]|((q&256)>>8)|                  \
          ((R.AF.B.h^q^Reg)&H_FLAG)|                    \
          (((Reg^R.AF.B.h^0x80)&(Reg^q)&0x80)>>5);      \
 R.AF.B.h=q;                                            \
}

#define M_ADC(Reg)                                      \
{                                                       \
 int q;                                                 \
 q=R.AF.B.h+Reg+(R.AF.B.l&1);                           \
 R.AF.B.l=ZSTable[q&255]|((q&256)>>8)|                  \
          ((R.AF.B.h^q^Reg)&H_FLAG)|                    \
          (((Reg^R.AF.B.h^0x80)&(Reg^q)&0x80)>>5);      \
 R.AF.B.h=q;                                            \
}

#define M_SUB(Reg)                                      \
{                                                       \
 int q;                                                 \
 q=R.AF.B.h-Reg;                                        \
 R.AF.B.l=ZSTable[q&255]|((q&256)>>8)|N_FLAG|           \
          ((R.AF.B.h^q^Reg)&H_FLAG)|                    \
          (((Reg^R.AF.B.h)&(Reg^q)&0x80)>>5);           \
 R.AF.B.h=q;                                            \
}

#define M_SBC(Reg)                                      \
{                                                       \
 int q;                                                 \
 q=R.AF.B.h-Reg-(R.AF.B.l&1);                           \
 R.AF.B.l=ZSTable[q&255]|((q&256)>>8)|N_FLAG|           \
          ((R.AF.B.h^q^Reg)&H_FLAG)|                    \
          (((Reg^R.AF.B.h)&(Reg^q)&0x80)>>5);           \
 R.AF.B.h=q;                                            \
}

#define M_CP(Reg)                                       \
{                                                       \
 int q;                                                 \
 q=R.AF.B.h-Reg;                                        \
 R.AF.B.l=ZSTable[q&255]|((q&256)>>8)|N_FLAG|           \
          ((R.AF.B.h^q^Reg)&H_FLAG)|                    \
          (((Reg^R.AF.B.h)&(Reg^q)&0x80)>>5);           \
}

#define M_ADDW(Reg1,Reg2)                              \
{                                                      \
 int q;                                                \
 q=R.Reg1.D+R.Reg2.D;                                  \
 R.AF.B.l=(R.AF.B.l&(S_FLAG|Z_FLAG|V_FLAG))|           \
          (((R.Reg1.D^q^R.Reg2.D)&0x1000)>>8)|         \
          ((q>>16)&1);                                 \
 R.Reg1.W.l=q;                                         \
}

#define M_ADCW(Reg)                                            \
{                                                              \
 int q;                                                        \
 q=R.HL.D+R.Reg.D+(R.AF.D&1);                                  \
 R.AF.B.l=(((R.HL.D^q^R.Reg.D)&0x1000)>>8)|                    \
          ((q>>16)&1)|                                         \
          ((q&0x8000)>>8)|                                     \
          ((q&65535)?0:Z_FLAG)|                                \
          (((R.Reg.D^R.HL.D^0x8000)&(R.Reg.D^q)&0x8000)>>13);  \
 R.HL.W.l=q;                                                   \
}

#define M_SBCW(Reg)                                    \
{                                                      \
 int q;                                                \
 q=R.HL.D-R.Reg.D-(R.AF.D&1);                          \
 R.AF.B.l=(((R.HL.D^q^R.Reg.D)&0x1000)>>8)|            \
          ((q>>16)&1)|                                 \
          ((q&0x8000)>>8)|                             \
          ((q&65535)?0:Z_FLAG)|                        \
          (((R.Reg.D^R.HL.D)&(R.Reg.D^q)&0x8000)>>13)| \
          N_FLAG;                                      \
 R.HL.W.l=q;                                           \
}

void z80cpu::adc_a_xhl(void) { byte i=M_RD_XHL; M_ADC(i); }
void z80cpu::adc_a_xix(void) { byte i=M_RD_XIX(); M_ADC(i); }
void z80cpu::adc_a_xiy(void) { byte i=M_RD_XIY(); M_ADC(i); }
void z80cpu::adc_a_a(void) { M_ADC(R.AF.B.h); }
void z80cpu::adc_a_b(void) { M_ADC(R.BC.B.h); }
void z80cpu::adc_a_c(void) { M_ADC(R.BC.B.l); }
void z80cpu::adc_a_d(void) { M_ADC(R.DE.B.h); }
void z80cpu::adc_a_e(void) { M_ADC(R.DE.B.l); }
void z80cpu::adc_a_h(void) { M_ADC(R.HL.B.h); }
void z80cpu::adc_a_l(void) { M_ADC(R.HL.B.l); }
void z80cpu::adc_a_ixl(void) { M_ADC(R.IX.B.l); }
void z80cpu::adc_a_ixh(void) { M_ADC(R.IX.B.h); }
void z80cpu::adc_a_iyl(void) { M_ADC(R.IY.B.l); }
void z80cpu::adc_a_iyh(void) { M_ADC(R.IY.B.h); }
void z80cpu::adc_a_byte(void) { byte i=M_RDMEM_OPCODE(); M_ADC(i); }

void z80cpu::adc_hl_bc(void) { M_ADCW(BC); }
void z80cpu::adc_hl_de(void) { M_ADCW(DE); }
void z80cpu::adc_hl_hl(void) { M_ADCW(HL); }
void z80cpu::adc_hl_sp(void) { M_ADCW(SP); }

void z80cpu::add_a_xhl(void) { byte i=M_RD_XHL; M_ADD(i); }
void z80cpu::add_a_xix(void) { byte i=M_RD_XIX(); M_ADD(i); }
void z80cpu::add_a_xiy(void) { byte i=M_RD_XIY(); M_ADD(i); }
void z80cpu::add_a_a(void) { M_ADD(R.AF.B.h); }
void z80cpu::add_a_b(void) { M_ADD(R.BC.B.h); }
void z80cpu::add_a_c(void) { M_ADD(R.BC.B.l); }
void z80cpu::add_a_d(void) { M_ADD(R.DE.B.h); }
void z80cpu::add_a_e(void) { M_ADD(R.DE.B.l); }
void z80cpu::add_a_h(void) { M_ADD(R.HL.B.h); }
void z80cpu::add_a_l(void) { M_ADD(R.HL.B.l); }
void z80cpu::add_a_ixl(void) { M_ADD(R.IX.B.l); }
void z80cpu::add_a_ixh(void) { M_ADD(R.IX.B.h); }
void z80cpu::add_a_iyl(void) { M_ADD(R.IY.B.l); }
void z80cpu::add_a_iyh(void) { M_ADD(R.IY.B.h); }
void z80cpu::add_a_byte(void) { byte i=M_RDMEM_OPCODE(); M_ADD(i); }

void z80cpu::add_hl_bc(void) { M_ADDW(HL,BC); }
void z80cpu::add_hl_de(void) { M_ADDW(HL,DE); }
void z80cpu::add_hl_hl(void) { M_ADDW(HL,HL); }
void z80cpu::add_hl_sp(void) { M_ADDW(HL,SP); }
void z80cpu::add_ix_bc(void) { M_ADDW(IX,BC); }
void z80cpu::add_ix_de(void) { M_ADDW(IX,DE); }
void z80cpu::add_ix_ix(void) { M_ADDW(IX,IX); }
void z80cpu::add_ix_sp(void) { M_ADDW(IX,SP); }
void z80cpu::add_iy_bc(void) { M_ADDW(IY,BC); }
void z80cpu::add_iy_de(void) { M_ADDW(IY,DE); }
void z80cpu::add_iy_iy(void) { M_ADDW(IY,IY); }
void z80cpu::add_iy_sp(void) { M_ADDW(IY,SP); }

void z80cpu::and_xhl(void) { byte i=M_RD_XHL; M_AND(i); }
void z80cpu::and_xix(void) { byte i=M_RD_XIX(); M_AND(i); }
void z80cpu::and_xiy(void) { byte i=M_RD_XIY(); M_AND(i); }
void z80cpu::and_a(void) { R.AF.B.l=ZSPTable[R.AF.B.h]|H_FLAG; }
void z80cpu::and_b(void) { M_AND(R.BC.B.h); }
void z80cpu::and_c(void) { M_AND(R.BC.B.l); }
void z80cpu::and_d(void) { M_AND(R.DE.B.h); }
void z80cpu::and_e(void) { M_AND(R.DE.B.l); }
void z80cpu::and_h(void) { M_AND(R.HL.B.h); }
void z80cpu::and_l(void) { M_AND(R.HL.B.l); }
void z80cpu::and_ixh(void) { M_AND(R.IX.B.h); }
void z80cpu::and_ixl(void) { M_AND(R.IX.B.l); }
void z80cpu::and_iyh(void) { M_AND(R.IY.B.h); }
void z80cpu::and_iyl(void) { M_AND(R.IY.B.l); }
void z80cpu::and_byte(void) { byte i=M_RDMEM_OPCODE(); M_AND(i); }

void z80cpu::bit_0_xhl(void) { byte i=M_RD_XHL; M_BIT(0,i); }
void z80cpu::bit_0_xix(void) { byte i=M_RD_XIX(); M_BIT(0,i); }
void z80cpu::bit_0_xiy(void) { byte i=M_RD_XIY(); M_BIT(0,i); }
void z80cpu::bit_0_a(void) { M_BIT(0,R.AF.B.h); }
void z80cpu::bit_0_b(void) { M_BIT(0,R.BC.B.h); }
void z80cpu::bit_0_c(void) { M_BIT(0,R.BC.B.l); }
void z80cpu::bit_0_d(void) { M_BIT(0,R.DE.B.h); }
void z80cpu::bit_0_e(void) { M_BIT(0,R.DE.B.l); }
void z80cpu::bit_0_h(void) { M_BIT(0,R.HL.B.h); }
void z80cpu::bit_0_l(void) { M_BIT(0,R.HL.B.l); }

void z80cpu::bit_1_xhl(void) { byte i=M_RD_XHL; M_BIT(1,i); }
void z80cpu::bit_1_xix(void) { byte i=M_RD_XIX(); M_BIT(1,i); }
void z80cpu::bit_1_xiy(void) { byte i=M_RD_XIY(); M_BIT(1,i); }
void z80cpu::bit_1_a(void) { M_BIT(1,R.AF.B.h); }
void z80cpu::bit_1_b(void) { M_BIT(1,R.BC.B.h); }
void z80cpu::bit_1_c(void) { M_BIT(1,R.BC.B.l); }
void z80cpu::bit_1_d(void) { M_BIT(1,R.DE.B.h); }
void z80cpu::bit_1_e(void) { M_BIT(1,R.DE.B.l); }
void z80cpu::bit_1_h(void) { M_BIT(1,R.HL.B.h); }
void z80cpu::bit_1_l(void) { M_BIT(1,R.HL.B.l); }

void z80cpu::bit_2_xhl(void) { byte i=M_RD_XHL; M_BIT(2,i); }
void z80cpu::bit_2_xix(void) { byte i=M_RD_XIX(); M_BIT(2,i); }
void z80cpu::bit_2_xiy(void) { byte i=M_RD_XIY(); M_BIT(2,i); }
void z80cpu::bit_2_a(void) { M_BIT(2,R.AF.B.h); }
void z80cpu::bit_2_b(void) { M_BIT(2,R.BC.B.h); }
void z80cpu::bit_2_c(void) { M_BIT(2,R.BC.B.l); }
void z80cpu::bit_2_d(void) { M_BIT(2,R.DE.B.h); }
void z80cpu::bit_2_e(void) { M_BIT(2,R.DE.B.l); }
void z80cpu::bit_2_h(void) { M_BIT(2,R.HL.B.h); }
void z80cpu::bit_2_l(void) { M_BIT(2,R.HL.B.l); }

void z80cpu::bit_3_xhl(void) { byte i=M_RD_XHL; M_BIT(3,i); }
void z80cpu::bit_3_xix(void) { byte i=M_RD_XIX(); M_BIT(3,i); }
void z80cpu::bit_3_xiy(void) { byte i=M_RD_XIY(); M_BIT(3,i); }
void z80cpu::bit_3_a(void) { M_BIT(3,R.AF.B.h); }
void z80cpu::bit_3_b(void) { M_BIT(3,R.BC.B.h); }
void z80cpu::bit_3_c(void) { M_BIT(3,R.BC.B.l); }
void z80cpu::bit_3_d(void) { M_BIT(3,R.DE.B.h); }
void z80cpu::bit_3_e(void) { M_BIT(3,R.DE.B.l); }
void z80cpu::bit_3_h(void) { M_BIT(3,R.HL.B.h); }
void z80cpu::bit_3_l(void) { M_BIT(3,R.HL.B.l); }

void z80cpu::bit_4_xhl(void) { byte i=M_RD_XHL; M_BIT(4,i); }
void z80cpu::bit_4_xix(void) { byte i=M_RD_XIX(); M_BIT(4,i); }
void z80cpu::bit_4_xiy(void) { byte i=M_RD_XIY(); M_BIT(4,i); }
void z80cpu::bit_4_a(void) { M_BIT(4,R.AF.B.h); }
void z80cpu::bit_4_b(void) { M_BIT(4,R.BC.B.h); }
void z80cpu::bit_4_c(void) { M_BIT(4,R.BC.B.l); }
void z80cpu::bit_4_d(void) { M_BIT(4,R.DE.B.h); }
void z80cpu::bit_4_e(void) { M_BIT(4,R.DE.B.l); }
void z80cpu::bit_4_h(void) { M_BIT(4,R.HL.B.h); }
void z80cpu::bit_4_l(void) { M_BIT(4,R.HL.B.l); }

void z80cpu::bit_5_xhl(void) { byte i=M_RD_XHL; M_BIT(5,i); }
void z80cpu::bit_5_xix(void) { byte i=M_RD_XIX(); M_BIT(5,i); }
void z80cpu::bit_5_xiy(void) { byte i=M_RD_XIY(); M_BIT(5,i); }
void z80cpu::bit_5_a(void) { M_BIT(5,R.AF.B.h); }
void z80cpu::bit_5_b(void) { M_BIT(5,R.BC.B.h); }
void z80cpu::bit_5_c(void) { M_BIT(5,R.BC.B.l); }
void z80cpu::bit_5_d(void) { M_BIT(5,R.DE.B.h); }
void z80cpu::bit_5_e(void) { M_BIT(5,R.DE.B.l); }
void z80cpu::bit_5_h(void) { M_BIT(5,R.HL.B.h); }
void z80cpu::bit_5_l(void) { M_BIT(5,R.HL.B.l); }

void z80cpu::bit_6_xhl(void) { byte i=M_RD_XHL; M_BIT(6,i); }
void z80cpu::bit_6_xix(void) { byte i=M_RD_XIX(); M_BIT(6,i); }
void z80cpu::bit_6_xiy(void) { byte i=M_RD_XIY(); M_BIT(6,i); }
void z80cpu::bit_6_a(void) { M_BIT(6,R.AF.B.h); }
void z80cpu::bit_6_b(void) { M_BIT(6,R.BC.B.h); }
void z80cpu::bit_6_c(void) { M_BIT(6,R.BC.B.l); }
void z80cpu::bit_6_d(void) { M_BIT(6,R.DE.B.h); }
void z80cpu::bit_6_e(void) { M_BIT(6,R.DE.B.l); }
void z80cpu::bit_6_h(void) { M_BIT(6,R.HL.B.h); }
void z80cpu::bit_6_l(void) { M_BIT(6,R.HL.B.l); }

void z80cpu::bit_7_xhl(void) { byte i=M_RD_XHL; M_BIT(7,i); }
void z80cpu::bit_7_xix(void) { byte i=M_RD_XIX(); M_BIT(7,i); }
void z80cpu::bit_7_xiy(void) { byte i=M_RD_XIY(); M_BIT(7,i); }
void z80cpu::bit_7_a(void) { M_BIT(7,R.AF.B.h); }
void z80cpu::bit_7_b(void) { M_BIT(7,R.BC.B.h); }
void z80cpu::bit_7_c(void) { M_BIT(7,R.BC.B.l); }
void z80cpu::bit_7_d(void) { M_BIT(7,R.DE.B.h); }
void z80cpu::bit_7_e(void) { M_BIT(7,R.DE.B.l); }
void z80cpu::bit_7_h(void) { M_BIT(7,R.HL.B.h); }
void z80cpu::bit_7_l(void) { M_BIT(7,R.HL.B.l); }

void z80cpu::call_c(void) { if (M_C) { M_CALL; } else { M_SKIP_CALL; } }
void z80cpu::call_m(void) { if (M_M) { M_CALL; } else { M_SKIP_CALL; } }
void z80cpu::call_nc(void) { if (M_NC) { M_CALL; } else { M_SKIP_CALL; } }
void z80cpu::call_nz(void) { if (M_NZ) { M_CALL; } else { M_SKIP_CALL; } }
void z80cpu::call_p(void) { if (M_P) { M_CALL; } else { M_SKIP_CALL; } }
void z80cpu::call_pe(void) { if (M_PE) { M_CALL; } else { M_SKIP_CALL; } }
void z80cpu::call_po(void) { if (M_PO) { M_CALL; } else { M_SKIP_CALL; } }
void z80cpu::call_z(void) { if (M_Z) { M_CALL; } else { M_SKIP_CALL; } }
void z80cpu::call(void) { M_CALL; }

void z80cpu::ccf(void) { R.AF.B.l=((R.AF.B.l&0xED)|((R.AF.B.l&1)<<4))^1; }

void z80cpu::cp_xhl(void) { byte i=M_RD_XHL; M_CP(i); }
void z80cpu::cp_xix(void) { byte i=M_RD_XIX(); M_CP(i); }
void z80cpu::cp_xiy(void) { byte i=M_RD_XIY(); M_CP(i); }
void z80cpu::cp_a(void) { M_CP(R.AF.B.h); }
void z80cpu::cp_b(void) { M_CP(R.BC.B.h); }
void z80cpu::cp_c(void) { M_CP(R.BC.B.l); }
void z80cpu::cp_d(void) { M_CP(R.DE.B.h); }
void z80cpu::cp_e(void) { M_CP(R.DE.B.l); }
void z80cpu::cp_h(void) { M_CP(R.HL.B.h); }
void z80cpu::cp_l(void) { M_CP(R.HL.B.l); }
void z80cpu::cp_ixh(void) { M_CP(R.IX.B.h); }
void z80cpu::cp_ixl(void) { M_CP(R.IX.B.l); }
void z80cpu::cp_iyh(void) { M_CP(R.IY.B.h); }
void z80cpu::cp_iyl(void) { M_CP(R.IY.B.l); }
void z80cpu::cp_byte(void) { byte i=M_RDMEM_OPCODE(); M_CP(i); }

void z80cpu::cpd(void)
{
 byte i,j;
 i=M_RDMEM(R.HL.D);
 j=R.AF.B.h-i;
 --R.HL.W.l;
 --R.BC.W.l;
 R.AF.B.l=(R.AF.B.l&C_FLAG)|ZSTable[j]|
          ((R.AF.B.h^i^j)&H_FLAG)|(R.BC.D? V_FLAG:0)|N_FLAG;
}

void z80cpu::cpdr(void)
{
 cpd ();
 if (R.BC.D && !(R.AF.B.l&Z_FLAG)) { Z80_ICount-=5; R.PC.W.l-=2; }
}

void z80cpu::cpi(void)
{
 byte i,j;
 i=M_RDMEM(R.HL.D);
 j=R.AF.B.h-i;
 ++R.HL.W.l;
 --R.BC.W.l;
 R.AF.B.l=(R.AF.B.l&C_FLAG)|ZSTable[j]|
          ((R.AF.B.h^i^j)&H_FLAG)|(R.BC.D? V_FLAG:0)|N_FLAG;
}

void z80cpu::cpir(void)
{
 cpi ();
 if (R.BC.D && !(R.AF.B.l&Z_FLAG)) { Z80_ICount-=5; R.PC.W.l-=2; }
}

void z80cpu::cpl(void) { R.AF.B.h^=0xFF; R.AF.B.l|=(H_FLAG|N_FLAG); }

void z80cpu::daa(void)
{
 int i;
 i=R.AF.B.h;
 if (R.AF.B.l&C_FLAG) i|=256;
 if (R.AF.B.l&H_FLAG) i|=512;
 if (R.AF.B.l&N_FLAG) i|=1024;
 R.AF.W.l=DAATable[i];
};

void z80cpu::dec_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_DEC(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::dec_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_DEC(i);
 M_WRMEM(j,i);
}
void z80cpu::dec_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_DEC(i);
 M_WRMEM(j,i);
}
void z80cpu::dec_a(void) { M_DEC(R.AF.B.h); }
void z80cpu::dec_b(void) { M_DEC(R.BC.B.h); }
void z80cpu::dec_c(void) { M_DEC(R.BC.B.l); }
void z80cpu::dec_d(void) { M_DEC(R.DE.B.h); }
void z80cpu::dec_e(void) { M_DEC(R.DE.B.l); }
void z80cpu::dec_h(void) { M_DEC(R.HL.B.h); }
void z80cpu::dec_l(void) { M_DEC(R.HL.B.l); }
void z80cpu::dec_ixh(void) { M_DEC(R.IX.B.h); }
void z80cpu::dec_ixl(void) { M_DEC(R.IX.B.l); }
void z80cpu::dec_iyh(void) { M_DEC(R.IY.B.h); }
void z80cpu::dec_iyl(void) { M_DEC(R.IY.B.l); }

void z80cpu::dec_bc(void) { --R.BC.W.l; }
void z80cpu::dec_de(void) { --R.DE.W.l; }
void z80cpu::dec_hl(void) { --R.HL.W.l; }
void z80cpu::dec_ix(void) { --R.IX.W.l; }
void z80cpu::dec_iy(void) { --R.IY.W.l; }
void z80cpu::dec_sp(void) { --R.SP.W.l; }

void z80cpu::di(void) { R.IFF1=R.IFF2=0; }

void z80cpu::djnz(void) { if (--R.BC.B.h) { M_JR; } else { M_SKIP_JR; } }

void z80cpu::ex_xsp_hl(void)
{
 int i;
 i=M_RDMEM_WORD(R.SP.D);
 M_WRMEM_WORD(R.SP.D,R.HL.D);
 R.HL.D=i;
}

void z80cpu::ex_xsp_ix(void)
{
 int i;
 i=M_RDMEM_WORD(R.SP.D);
 M_WRMEM_WORD(R.SP.D,R.IX.D);
 R.IX.D=i;
}

void z80cpu::ex_xsp_iy(void)
{
 int i;
 i=M_RDMEM_WORD(R.SP.D);
 M_WRMEM_WORD(R.SP.D,R.IY.D);
 R.IY.D=i;
}

void z80cpu::ex_af_af(void)
{
 int i;
 i=R.AF.D;
 R.AF.D=R.AF2.D;
 R.AF2.D=i;
}

void z80cpu::ex_de_hl(void)
{
 int i;
 i=R.DE.D;
 R.DE.D=R.HL.D;
 R.HL.D=i;
}

void z80cpu::exx(void)
{
 int i;
 i=R.BC.D;
 R.BC.D=R.BC2.D;
 R.BC2.D=i;
 i=R.DE.D;
 R.DE.D=R.DE2.D;
 R.DE2.D=i;
 i=R.HL.D;
 R.HL.D=R.HL2.D;
 R.HL2.D=i;
}

void z80cpu::halt(void)
{
 --R.PC.W.l;
 R.HALT=1;
 if (Z80_ICount>0) Z80_ICount=0;
}

void z80cpu::im_0(void) { R.IM=0; }
void z80cpu::im_1(void) { R.IM=1; }
void z80cpu::im_2(void) { R.IM=2; }

void z80cpu::in_a_c(void) { M_IN(R.AF.B.h); }
void z80cpu::in_b_c(void) { M_IN(R.BC.B.h); }
void z80cpu::in_c_c(void) { M_IN(R.BC.B.l); }
void z80cpu::in_d_c(void) { M_IN(R.DE.B.h); }
void z80cpu::in_e_c(void) { M_IN(R.DE.B.l); }
void z80cpu::in_h_c(void) { M_IN(R.HL.B.h); }
void z80cpu::in_l_c(void) { M_IN(R.HL.B.l); }
void z80cpu::in_0_c(void) { byte i; M_IN(i); }

void z80cpu::in_a_byte(void)
{
 byte i=M_RDMEM_OPCODE();
 R.AF.B.h=DoIn(i,R.AF.B.h);
}

void z80cpu::inc_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_INC(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::inc_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_INC(i);
 M_WRMEM(j,i);
}
void z80cpu::inc_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_INC(i);
 M_WRMEM(j,i);
}
void z80cpu::inc_a(void) { M_INC(R.AF.B.h); }
void z80cpu::inc_b(void) { M_INC(R.BC.B.h); }
void z80cpu::inc_c(void) { M_INC(R.BC.B.l); }
void z80cpu::inc_d(void) { M_INC(R.DE.B.h); }
void z80cpu::inc_e(void) { M_INC(R.DE.B.l); }
void z80cpu::inc_h(void) { M_INC(R.HL.B.h); }
void z80cpu::inc_l(void) { M_INC(R.HL.B.l); }
void z80cpu::inc_ixh(void) { M_INC(R.IX.B.h); }
void z80cpu::inc_ixl(void) { M_INC(R.IX.B.l); }
void z80cpu::inc_iyh(void) { M_INC(R.IY.B.h); }
void z80cpu::inc_iyl(void) { M_INC(R.IY.B.l); }

void z80cpu::inc_bc(void) { ++R.BC.W.l; }
void z80cpu::inc_de(void) { ++R.DE.W.l; }
void z80cpu::inc_hl(void) { ++R.HL.W.l; }
void z80cpu::inc_ix(void) { ++R.IX.W.l; }
void z80cpu::inc_iy(void) { ++R.IY.W.l; }
void z80cpu::inc_sp(void) { ++R.SP.W.l; }

void z80cpu::ind(void)
{
 --R.BC.B.h;
 M_WRMEM(R.HL.D,DoIn(R.BC.B.l,R.BC.B.h));
 --R.HL.W.l;
 R.AF.B.l=(R.BC.B.h)? N_FLAG:(N_FLAG|Z_FLAG);
}

void z80cpu::indr(void)
{
 ind ();
 if (R.BC.B.h) { Z80_ICount-=5; R.PC.W.l-=2; }
}

void z80cpu::ini(void)
{
 --R.BC.B.h;
 M_WRMEM(R.HL.D,DoIn(R.BC.B.l,R.BC.B.h));
 ++R.HL.W.l;
 R.AF.B.l=(R.BC.B.h)? N_FLAG:(N_FLAG|Z_FLAG);
}

void z80cpu::inir(void)
{
 ini ();
 if (R.BC.B.h) { Z80_ICount-=5; R.PC.W.l-=2; }
}

void z80cpu::jp(void) { M_JP; }
void z80cpu::jp_hl(void) { R.PC.D=R.HL.D; }
void z80cpu::jp_ix(void) { R.PC.D=R.IX.D; }
void z80cpu::jp_iy(void) { R.PC.D=R.IY.D; }
void z80cpu::jp_c(void) { if (M_C) { M_JP; } else { M_SKIP_JP; } }
void z80cpu::jp_m(void) { if (M_M) { M_JP; } else { M_SKIP_JP; } }
void z80cpu::jp_nc(void) { if (M_NC) { M_JP; } else { M_SKIP_JP; } }
void z80cpu::jp_nz(void) { if (M_NZ) { M_JP; } else { M_SKIP_JP; } }
void z80cpu::jp_p(void) { if (M_P) { M_JP; } else { M_SKIP_JP; } }
void z80cpu::jp_pe(void) { if (M_PE) { M_JP; } else { M_SKIP_JP; } }
void z80cpu::jp_po(void) { if (M_PO) { M_JP; } else { M_SKIP_JP; } }
void z80cpu::jp_z(void) { if (M_Z) { M_JP; } else { M_SKIP_JP; } }

void z80cpu::jr(void) { M_JR; }
void z80cpu::jr_c(void) { if (M_C) { M_JR; } else { M_SKIP_JR; } }
void z80cpu::jr_nc(void) { if (M_NC) { M_JR; } else { M_SKIP_JR; } }
void z80cpu::jr_nz(void) { if (M_NZ) { M_JR; } else { M_SKIP_JR; } }
void z80cpu::jr_z(void) { if (M_Z) { M_JR; } else { M_SKIP_JR; } }

void z80cpu::ld_xbc_a(void) { M_WRMEM(R.BC.D,R.AF.B.h); }
void z80cpu::ld_xde_a(void) { M_WRMEM(R.DE.D,R.AF.B.h); }
void z80cpu::ld_xhl_a(void) { M_WRMEM(R.HL.D,R.AF.B.h); }
void z80cpu::ld_xhl_b(void) { M_WRMEM(R.HL.D,R.BC.B.h); }
void z80cpu::ld_xhl_c(void) { M_WRMEM(R.HL.D,R.BC.B.l); }
void z80cpu::ld_xhl_d(void) { M_WRMEM(R.HL.D,R.DE.B.h); }
void z80cpu::ld_xhl_e(void) { M_WRMEM(R.HL.D,R.DE.B.l); }
void z80cpu::ld_xhl_h(void) { M_WRMEM(R.HL.D,R.HL.B.h); }
void z80cpu::ld_xhl_l(void) { M_WRMEM(R.HL.D,R.HL.B.l); }
void z80cpu::ld_xhl_byte(void) { byte i=M_RDMEM_OPCODE(); M_WRMEM(R.HL.D,i); }
void z80cpu::ld_xix_a(void) { M_WR_XIX(R.AF.B.h); }
void z80cpu::ld_xix_b(void) { M_WR_XIX(R.BC.B.h); }
void z80cpu::ld_xix_c(void) { M_WR_XIX(R.BC.B.l); }
void z80cpu::ld_xix_d(void) { M_WR_XIX(R.DE.B.h); }
void z80cpu::ld_xix_e(void) { M_WR_XIX(R.DE.B.l); }
void z80cpu::ld_xix_h(void) { M_WR_XIX(R.HL.B.h); }
void z80cpu::ld_xix_l(void) { M_WR_XIX(R.HL.B.l); }
void z80cpu::ld_xix_byte(void)
{
 int i,j;
 i=M_XIX;
 j=M_RDMEM_OPCODE();
 M_WRMEM(i,j);
}
void z80cpu::ld_xiy_a(void) { M_WR_XIY(R.AF.B.h); }
void z80cpu::ld_xiy_b(void) { M_WR_XIY(R.BC.B.h); }
void z80cpu::ld_xiy_c(void) { M_WR_XIY(R.BC.B.l); }
void z80cpu::ld_xiy_d(void) { M_WR_XIY(R.DE.B.h); }
void z80cpu::ld_xiy_e(void) { M_WR_XIY(R.DE.B.l); }
void z80cpu::ld_xiy_h(void) { M_WR_XIY(R.HL.B.h); }
void z80cpu::ld_xiy_l(void) { M_WR_XIY(R.HL.B.l); }
void z80cpu::ld_xiy_byte(void)
{
 int i,j;
 i=M_XIY;
 j=M_RDMEM_OPCODE();
 M_WRMEM(i,j);
}
void z80cpu::ld_xbyte_a(void)
{ int i=M_RDMEM_OPCODE_WORD(); M_WRMEM(i,R.AF.B.h); }
void z80cpu::ld_xword_bc(void) { M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(),R.BC.D); }
void z80cpu::ld_xword_de(void) { M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(),R.DE.D); }
void z80cpu::ld_xword_hl(void) { M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(),R.HL.D); }
void z80cpu::ld_xword_ix(void) { M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(),R.IX.D); }
void z80cpu::ld_xword_iy(void) { M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(),R.IY.D); }
void z80cpu::ld_xword_sp(void) { M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(),R.SP.D); }
void z80cpu::ld_a_xbc(void) { R.AF.B.h=M_RDMEM(R.BC.D); }
void z80cpu::ld_a_xde(void) { R.AF.B.h=M_RDMEM(R.DE.D); }
void z80cpu::ld_a_xhl(void) { R.AF.B.h=M_RD_XHL; }
void z80cpu::ld_a_xix(void) { R.AF.B.h=M_RD_XIX(); }
void z80cpu::ld_a_xiy(void) { R.AF.B.h=M_RD_XIY(); }
void z80cpu::ld_a_xbyte(void)
{ int i=M_RDMEM_OPCODE_WORD(); R.AF.B.h=M_RDMEM(i); }

void z80cpu::ld_a_byte(void) { R.AF.B.h=M_RDMEM_OPCODE(); }
void z80cpu::ld_b_byte(void) { R.BC.B.h=M_RDMEM_OPCODE(); }
void z80cpu::ld_c_byte(void) { R.BC.B.l=M_RDMEM_OPCODE(); }
void z80cpu::ld_d_byte(void) { R.DE.B.h=M_RDMEM_OPCODE(); }
void z80cpu::ld_e_byte(void) { R.DE.B.l=M_RDMEM_OPCODE(); }
void z80cpu::ld_h_byte(void) { R.HL.B.h=M_RDMEM_OPCODE(); }
void z80cpu::ld_l_byte(void) { R.HL.B.l=M_RDMEM_OPCODE(); }
void z80cpu::ld_ixh_byte(void) { R.IX.B.h=M_RDMEM_OPCODE(); }
void z80cpu::ld_ixl_byte(void) { R.IX.B.l=M_RDMEM_OPCODE(); }
void z80cpu::ld_iyh_byte(void) { R.IY.B.h=M_RDMEM_OPCODE(); }
void z80cpu::ld_iyl_byte(void) { R.IY.B.l=M_RDMEM_OPCODE(); }

void z80cpu::ld_b_xhl(void) { R.BC.B.h=M_RD_XHL; }
void z80cpu::ld_c_xhl(void) { R.BC.B.l=M_RD_XHL; }
void z80cpu::ld_d_xhl(void) { R.DE.B.h=M_RD_XHL; }
void z80cpu::ld_e_xhl(void) { R.DE.B.l=M_RD_XHL; }
void z80cpu::ld_h_xhl(void) { R.HL.B.h=M_RD_XHL; }
void z80cpu::ld_l_xhl(void) { R.HL.B.l=M_RD_XHL; }
void z80cpu::ld_b_xix(void) { R.BC.B.h=M_RD_XIX(); }
void z80cpu::ld_c_xix(void) { R.BC.B.l=M_RD_XIX(); }
void z80cpu::ld_d_xix(void) { R.DE.B.h=M_RD_XIX(); }
void z80cpu::ld_e_xix(void) { R.DE.B.l=M_RD_XIX(); }
void z80cpu::ld_h_xix(void) { R.HL.B.h=M_RD_XIX(); }
void z80cpu::ld_l_xix(void) { R.HL.B.l=M_RD_XIX(); }
void z80cpu::ld_b_xiy(void) { R.BC.B.h=M_RD_XIY(); }
void z80cpu::ld_c_xiy(void) { R.BC.B.l=M_RD_XIY(); }
void z80cpu::ld_d_xiy(void) { R.DE.B.h=M_RD_XIY(); }
void z80cpu::ld_e_xiy(void) { R.DE.B.l=M_RD_XIY(); }
void z80cpu::ld_h_xiy(void) { R.HL.B.h=M_RD_XIY(); }
void z80cpu::ld_l_xiy(void) { R.HL.B.l=M_RD_XIY(); }
void z80cpu::ld_a_a(void) { }
void z80cpu::ld_a_b(void) { R.AF.B.h=R.BC.B.h; }
void z80cpu::ld_a_c(void) { R.AF.B.h=R.BC.B.l; }
void z80cpu::ld_a_d(void) { R.AF.B.h=R.DE.B.h; }
void z80cpu::ld_a_e(void) { R.AF.B.h=R.DE.B.l; }
void z80cpu::ld_a_h(void) { R.AF.B.h=R.HL.B.h; }
void z80cpu::ld_a_l(void) { R.AF.B.h=R.HL.B.l; }
void z80cpu::ld_a_ixh(void) { R.AF.B.h=R.IX.B.h; }
void z80cpu::ld_a_ixl(void) { R.AF.B.h=R.IX.B.l; }
void z80cpu::ld_a_iyh(void) { R.AF.B.h=R.IY.B.h; }
void z80cpu::ld_a_iyl(void) { R.AF.B.h=R.IY.B.l; }
void z80cpu::ld_b_b(void) { }
void z80cpu::ld_b_a(void) { R.BC.B.h=R.AF.B.h; }
void z80cpu::ld_b_c(void) { R.BC.B.h=R.BC.B.l; }
void z80cpu::ld_b_d(void) { R.BC.B.h=R.DE.B.h; }
void z80cpu::ld_b_e(void) { R.BC.B.h=R.DE.B.l; }
void z80cpu::ld_b_h(void) { R.BC.B.h=R.HL.B.h; }
void z80cpu::ld_b_l(void) { R.BC.B.h=R.HL.B.l; }
void z80cpu::ld_b_ixh(void) { R.BC.B.h=R.IX.B.h; }
void z80cpu::ld_b_ixl(void) { R.BC.B.h=R.IX.B.l; }
void z80cpu::ld_b_iyh(void) { R.BC.B.h=R.IY.B.h; }
void z80cpu::ld_b_iyl(void) { R.BC.B.h=R.IY.B.l; }
void z80cpu::ld_c_c(void) { }
void z80cpu::ld_c_a(void) { R.BC.B.l=R.AF.B.h; }
void z80cpu::ld_c_b(void) { R.BC.B.l=R.BC.B.h; }
void z80cpu::ld_c_d(void) { R.BC.B.l=R.DE.B.h; }
void z80cpu::ld_c_e(void) { R.BC.B.l=R.DE.B.l; }
void z80cpu::ld_c_h(void) { R.BC.B.l=R.HL.B.h; }
void z80cpu::ld_c_l(void) { R.BC.B.l=R.HL.B.l; }
void z80cpu::ld_c_ixh(void) { R.BC.B.l=R.IX.B.h; }
void z80cpu::ld_c_ixl(void) { R.BC.B.l=R.IX.B.l; }
void z80cpu::ld_c_iyh(void) { R.BC.B.l=R.IY.B.h; }
void z80cpu::ld_c_iyl(void) { R.BC.B.l=R.IY.B.l; }
void z80cpu::ld_d_d(void) { }
void z80cpu::ld_d_a(void) { R.DE.B.h=R.AF.B.h; }
void z80cpu::ld_d_c(void) { R.DE.B.h=R.BC.B.l; }
void z80cpu::ld_d_b(void) { R.DE.B.h=R.BC.B.h; }
void z80cpu::ld_d_e(void) { R.DE.B.h=R.DE.B.l; }
void z80cpu::ld_d_h(void) { R.DE.B.h=R.HL.B.h; }
void z80cpu::ld_d_l(void) { R.DE.B.h=R.HL.B.l; }
void z80cpu::ld_d_ixh(void) { R.DE.B.h=R.IX.B.h; }
void z80cpu::ld_d_ixl(void) { R.DE.B.h=R.IX.B.l; }
void z80cpu::ld_d_iyh(void) { R.DE.B.h=R.IY.B.h; }
void z80cpu::ld_d_iyl(void) { R.DE.B.h=R.IY.B.l; }
void z80cpu::ld_e_e(void) { }
void z80cpu::ld_e_a(void) { R.DE.B.l=R.AF.B.h; }
void z80cpu::ld_e_c(void) { R.DE.B.l=R.BC.B.l; }
void z80cpu::ld_e_b(void) { R.DE.B.l=R.BC.B.h; }
void z80cpu::ld_e_d(void) { R.DE.B.l=R.DE.B.h; }
void z80cpu::ld_e_h(void) { R.DE.B.l=R.HL.B.h; }
void z80cpu::ld_e_l(void) { R.DE.B.l=R.HL.B.l; }
void z80cpu::ld_e_ixh(void) { R.DE.B.l=R.IX.B.h; }
void z80cpu::ld_e_ixl(void) { R.DE.B.l=R.IX.B.l; }
void z80cpu::ld_e_iyh(void) { R.DE.B.l=R.IY.B.h; }
void z80cpu::ld_e_iyl(void) { R.DE.B.l=R.IY.B.l; }
void z80cpu::ld_h_h(void) { }
void z80cpu::ld_h_a(void) { R.HL.B.h=R.AF.B.h; }
void z80cpu::ld_h_c(void) { R.HL.B.h=R.BC.B.l; }
void z80cpu::ld_h_b(void) { R.HL.B.h=R.BC.B.h; }
void z80cpu::ld_h_e(void) { R.HL.B.h=R.DE.B.l; }
void z80cpu::ld_h_d(void) { R.HL.B.h=R.DE.B.h; }
void z80cpu::ld_h_l(void) { R.HL.B.h=R.HL.B.l; }
void z80cpu::ld_l_l(void) { }
void z80cpu::ld_l_a(void) { R.HL.B.l=R.AF.B.h; }
void z80cpu::ld_l_c(void) { R.HL.B.l=R.BC.B.l; }
void z80cpu::ld_l_b(void) { R.HL.B.l=R.BC.B.h; }
void z80cpu::ld_l_e(void) { R.HL.B.l=R.DE.B.l; }
void z80cpu::ld_l_d(void) { R.HL.B.l=R.DE.B.h; }
void z80cpu::ld_l_h(void) { R.HL.B.l=R.HL.B.h; }
void z80cpu::ld_ixh_a(void) { R.IX.B.h=R.AF.B.h; }
void z80cpu::ld_ixh_b(void) { R.IX.B.h=R.BC.B.h; }
void z80cpu::ld_ixh_c(void) { R.IX.B.h=R.BC.B.l; }
void z80cpu::ld_ixh_d(void) { R.IX.B.h=R.DE.B.h; }
void z80cpu::ld_ixh_e(void) { R.IX.B.h=R.DE.B.l; }
void z80cpu::ld_ixh_ixh(void) { }
void z80cpu::ld_ixh_ixl(void) { R.IX.B.h=R.IX.B.l; }
void z80cpu::ld_ixl_a(void) { R.IX.B.l=R.AF.B.h; }
void z80cpu::ld_ixl_b(void) { R.IX.B.l=R.BC.B.h; }
void z80cpu::ld_ixl_c(void) { R.IX.B.l=R.BC.B.l; }
void z80cpu::ld_ixl_d(void) { R.IX.B.l=R.DE.B.h; }
void z80cpu::ld_ixl_e(void) { R.IX.B.l=R.DE.B.l; }
void z80cpu::ld_ixl_ixh(void) { R.IX.B.l=R.IX.B.h; }
void z80cpu::ld_ixl_ixl(void) { }
void z80cpu::ld_iyh_a(void) { R.IY.B.h=R.AF.B.h; }
void z80cpu::ld_iyh_b(void) { R.IY.B.h=R.BC.B.h; }
void z80cpu::ld_iyh_c(void) { R.IY.B.h=R.BC.B.l; }
void z80cpu::ld_iyh_d(void) { R.IY.B.h=R.DE.B.h; }
void z80cpu::ld_iyh_e(void) { R.IY.B.h=R.DE.B.l; }
void z80cpu::ld_iyh_iyh(void) { }
void z80cpu::ld_iyh_iyl(void) { R.IY.B.h=R.IY.B.l; }
void z80cpu::ld_iyl_a(void) { R.IY.B.l=R.AF.B.h; }
void z80cpu::ld_iyl_b(void) { R.IY.B.l=R.BC.B.h; }
void z80cpu::ld_iyl_c(void) { R.IY.B.l=R.BC.B.l; }
void z80cpu::ld_iyl_d(void) { R.IY.B.l=R.DE.B.h; }
void z80cpu::ld_iyl_e(void) { R.IY.B.l=R.DE.B.l; }
void z80cpu::ld_iyl_iyh(void) { R.IY.B.l=R.IY.B.h; }
void z80cpu::ld_iyl_iyl(void) { }
void z80cpu::ld_bc_xword(void) { R.BC.D=M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()); }
void z80cpu::ld_bc_word(void) { R.BC.D=M_RDMEM_OPCODE_WORD(); }
void z80cpu::ld_de_xword(void) { R.DE.D=M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()); }
void z80cpu::ld_de_word(void) { R.DE.D=M_RDMEM_OPCODE_WORD(); }
void z80cpu::ld_hl_xword(void) { R.HL.D=M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()); }
void z80cpu::ld_hl_word(void) { R.HL.D=M_RDMEM_OPCODE_WORD(); }
void z80cpu::ld_ix_xword(void) { R.IX.D=M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()); }
void z80cpu::ld_ix_word(void) { R.IX.D=M_RDMEM_OPCODE_WORD(); }
void z80cpu::ld_iy_xword(void) { R.IY.D=M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()); }
void z80cpu::ld_iy_word(void) { R.IY.D=M_RDMEM_OPCODE_WORD(); }
void z80cpu::ld_sp_xword(void) { R.SP.D=M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()); }
void z80cpu::ld_sp_word(void) { R.SP.D=M_RDMEM_OPCODE_WORD(); }
void z80cpu::ld_sp_hl(void) { R.SP.D=R.HL.D; }
void z80cpu::ld_sp_ix(void) { R.SP.D=R.IX.D; }
void z80cpu::ld_sp_iy(void) { R.SP.D=R.IY.D; }
void z80cpu::ld_a_i(void)
{
 R.AF.B.h=R.I;
 R.AF.B.l=(R.AF.B.l&C_FLAG)|ZSTable[R.I]|(R.IFF2<<2);
}
void z80cpu::ld_i_a(void) { R.I=R.AF.B.h; }
void z80cpu::ld_a_r(void)
{
 R.AF.B.h=(R.R&127)|(R.R_2&128);
 R.AF.B.l=(R.AF.B.l&C_FLAG)|ZSTable[R.AF.B.h]|(R.IFF2<<2);
}
void z80cpu::ld_r_a(void) { R.R=R.R_2=R.AF.B.h; }

void z80cpu::ldd(void)
{
 M_WRMEM(R.DE.D,M_RDMEM(R.HL.D));
 --R.DE.W.l;
 --R.HL.W.l;
 --R.BC.W.l;
 R.AF.B.l=(R.AF.B.l&0xE9)|(R.BC.D? V_FLAG:0);
}
void z80cpu::lddr(void)
{
 ldd ();
 if (R.BC.D) { Z80_ICount-=5; R.PC.W.l-=2; }
}
void z80cpu::ldi(void)
{
 M_WRMEM(R.DE.D,M_RDMEM(R.HL.D));
 ++R.DE.W.l;
 ++R.HL.W.l;
 --R.BC.W.l;
 R.AF.B.l=(R.AF.B.l&0xE9)|(R.BC.D? V_FLAG:0);
}
void z80cpu::ldir(void)
{
 ldi ();
 if (R.BC.D) { Z80_ICount-=5; R.PC.W.l-=2; }
}

void z80cpu::neg(void)
{
 byte i;
 i=R.AF.B.h;
 R.AF.B.h=0;
 M_SUB(i);
}

void z80cpu::nop(void) { };

void z80cpu::or_xhl(void) { byte i=M_RD_XHL; M_OR(i); }
void z80cpu::or_xix(void) { byte i=M_RD_XIX(); M_OR(i); }
void z80cpu::or_xiy(void) { byte i=M_RD_XIY(); M_OR(i); }
void z80cpu::or_a(void) { R.AF.B.l=ZSPTable[R.AF.B.h]; }
void z80cpu::or_b(void) { M_OR(R.BC.B.h); }
void z80cpu::or_c(void) { M_OR(R.BC.B.l); }
void z80cpu::or_d(void) { M_OR(R.DE.B.h); }
void z80cpu::or_e(void) { M_OR(R.DE.B.l); }
void z80cpu::or_h(void) { M_OR(R.HL.B.h); }
void z80cpu::or_l(void) { M_OR(R.HL.B.l); }
void z80cpu::or_ixh(void) { M_OR(R.IX.B.h); }
void z80cpu::or_ixl(void) { M_OR(R.IX.B.l); }
void z80cpu::or_iyh(void) { M_OR(R.IY.B.h); }
void z80cpu::or_iyl(void) { M_OR(R.IY.B.l); }
void z80cpu::or_byte(void) { byte i=M_RDMEM_OPCODE(); M_OR(i); }

void z80cpu::outd(void)
{
 --R.BC.B.h;
 DoOut (R.BC.B.l,R.BC.B.h,M_RDMEM(R.HL.D));
 --R.HL.W.l;
 R.AF.B.l=(R.BC.B.h)? N_FLAG:(Z_FLAG|N_FLAG);
}
void z80cpu::otdr(void)
{
 outd ();
 if (R.BC.B.h) { Z80_ICount-=5; R.PC.W.l-=2; }
}
void z80cpu::outi(void)
{
 --R.BC.B.h;
 DoOut (R.BC.B.l,R.BC.B.h,M_RDMEM(R.HL.D));
 ++R.HL.W.l;
 R.AF.B.l=(R.BC.B.h)? N_FLAG:(Z_FLAG|N_FLAG);
}
void z80cpu::otir(void)
{
 outi ();
 if (R.BC.B.h) { Z80_ICount-=5; R.PC.W.l-=2; }
}

void z80cpu::out_c_a(void) { DoOut(R.BC.B.l,R.BC.B.h,R.AF.B.h); }
void z80cpu::out_c_b(void) { DoOut(R.BC.B.l,R.BC.B.h,R.BC.B.h); }
void z80cpu::out_c_c(void) { DoOut(R.BC.B.l,R.BC.B.h,R.BC.B.l); }
void z80cpu::out_c_d(void) { DoOut(R.BC.B.l,R.BC.B.h,R.DE.B.h); }
void z80cpu::out_c_e(void) { DoOut(R.BC.B.l,R.BC.B.h,R.DE.B.l); }
void z80cpu::out_c_h(void) { DoOut(R.BC.B.l,R.BC.B.h,R.HL.B.h); }
void z80cpu::out_c_l(void) { DoOut(R.BC.B.l,R.BC.B.h,R.HL.B.l); }
void z80cpu::out_c_0(void) { DoOut(R.BC.B.l,R.BC.B.h,0); }
void z80cpu::out_byte_a(void)
{
 byte i=M_RDMEM_OPCODE();
 DoOut(i,R.AF.B.h,R.AF.B.h);
}

void z80cpu::pop_af(void) { M_POP(AF); }
void z80cpu::pop_bc(void) { M_POP(BC); }
void z80cpu::pop_de(void) { M_POP(DE); }
void z80cpu::pop_hl(void) { M_POP(HL); }
void z80cpu::pop_ix(void) { M_POP(IX); }
void z80cpu::pop_iy(void) { M_POP(IY); }

void z80cpu::push_af(void) { M_PUSH(AF); }
void z80cpu::push_bc(void) { M_PUSH(BC); }
void z80cpu::push_de(void) { M_PUSH(DE); }
void z80cpu::push_hl(void) { M_PUSH(HL); }
void z80cpu::push_ix(void) { M_PUSH(IX); }
void z80cpu::push_iy(void) { M_PUSH(IY); }

void z80cpu::res_0_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RES(0,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::res_0_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RES(0,i);
 M_WRMEM(j,i);
};
void z80cpu::res_0_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RES(0,i);
 M_WRMEM(j,i);
};
void z80cpu::res_0_a(void) { M_RES(0,R.AF.B.h); };
void z80cpu::res_0_b(void) { M_RES(0,R.BC.B.h); };
void z80cpu::res_0_c(void) { M_RES(0,R.BC.B.l); };
void z80cpu::res_0_d(void) { M_RES(0,R.DE.B.h); };
void z80cpu::res_0_e(void) { M_RES(0,R.DE.B.l); };
void z80cpu::res_0_h(void) { M_RES(0,R.HL.B.h); };
void z80cpu::res_0_l(void) { M_RES(0,R.HL.B.l); };

void z80cpu::res_1_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RES(1,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::res_1_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RES(1,i);
 M_WRMEM(j,i);
};
void z80cpu::res_1_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RES(1,i);
 M_WRMEM(j,i);
};
void z80cpu::res_1_a(void) { M_RES(1,R.AF.B.h); };
void z80cpu::res_1_b(void) { M_RES(1,R.BC.B.h); };
void z80cpu::res_1_c(void) { M_RES(1,R.BC.B.l); };
void z80cpu::res_1_d(void) { M_RES(1,R.DE.B.h); };
void z80cpu::res_1_e(void) { M_RES(1,R.DE.B.l); };
void z80cpu::res_1_h(void) { M_RES(1,R.HL.B.h); };
void z80cpu::res_1_l(void) { M_RES(1,R.HL.B.l); };

void z80cpu::res_2_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RES(2,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::res_2_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RES(2,i);
 M_WRMEM(j,i);
};
void z80cpu::res_2_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RES(2,i);
 M_WRMEM(j,i);
};
void z80cpu::res_2_a(void) { M_RES(2,R.AF.B.h); };
void z80cpu::res_2_b(void) { M_RES(2,R.BC.B.h); };
void z80cpu::res_2_c(void) { M_RES(2,R.BC.B.l); };
void z80cpu::res_2_d(void) { M_RES(2,R.DE.B.h); };
void z80cpu::res_2_e(void) { M_RES(2,R.DE.B.l); };
void z80cpu::res_2_h(void) { M_RES(2,R.HL.B.h); };
void z80cpu::res_2_l(void) { M_RES(2,R.HL.B.l); };

void z80cpu::res_3_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RES(3,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::res_3_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RES(3,i);
 M_WRMEM(j,i);
};
void z80cpu::res_3_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RES(3,i);
 M_WRMEM(j,i);
};
void z80cpu::res_3_a(void) { M_RES(3,R.AF.B.h); };
void z80cpu::res_3_b(void) { M_RES(3,R.BC.B.h); };
void z80cpu::res_3_c(void) { M_RES(3,R.BC.B.l); };
void z80cpu::res_3_d(void) { M_RES(3,R.DE.B.h); };
void z80cpu::res_3_e(void) { M_RES(3,R.DE.B.l); };
void z80cpu::res_3_h(void) { M_RES(3,R.HL.B.h); };
void z80cpu::res_3_l(void) { M_RES(3,R.HL.B.l); };

void z80cpu::res_4_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RES(4,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::res_4_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RES(4,i);
 M_WRMEM(j,i);
};
void z80cpu::res_4_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RES(4,i);
 M_WRMEM(j,i);
};
void z80cpu::res_4_a(void) { M_RES(4,R.AF.B.h); };
void z80cpu::res_4_b(void) { M_RES(4,R.BC.B.h); };
void z80cpu::res_4_c(void) { M_RES(4,R.BC.B.l); };
void z80cpu::res_4_d(void) { M_RES(4,R.DE.B.h); };
void z80cpu::res_4_e(void) { M_RES(4,R.DE.B.l); };
void z80cpu::res_4_h(void) { M_RES(4,R.HL.B.h); };
void z80cpu::res_4_l(void) { M_RES(4,R.HL.B.l); };

void z80cpu::res_5_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RES(5,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::res_5_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RES(5,i);
 M_WRMEM(j,i);
};
void z80cpu::res_5_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RES(5,i);
 M_WRMEM(j,i);
};
void z80cpu::res_5_a(void) { M_RES(5,R.AF.B.h); };
void z80cpu::res_5_b(void) { M_RES(5,R.BC.B.h); };
void z80cpu::res_5_c(void) { M_RES(5,R.BC.B.l); };
void z80cpu::res_5_d(void) { M_RES(5,R.DE.B.h); };
void z80cpu::res_5_e(void) { M_RES(5,R.DE.B.l); };
void z80cpu::res_5_h(void) { M_RES(5,R.HL.B.h); };
void z80cpu::res_5_l(void) { M_RES(5,R.HL.B.l); };

void z80cpu::res_6_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RES(6,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::res_6_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RES(6,i);
 M_WRMEM(j,i);
};
void z80cpu::res_6_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RES(6,i);
 M_WRMEM(j,i);
};
void z80cpu::res_6_a(void) { M_RES(6,R.AF.B.h); };
void z80cpu::res_6_b(void) { M_RES(6,R.BC.B.h); };
void z80cpu::res_6_c(void) { M_RES(6,R.BC.B.l); };
void z80cpu::res_6_d(void) { M_RES(6,R.DE.B.h); };
void z80cpu::res_6_e(void) { M_RES(6,R.DE.B.l); };
void z80cpu::res_6_h(void) { M_RES(6,R.HL.B.h); };
void z80cpu::res_6_l(void) { M_RES(6,R.HL.B.l); };

void z80cpu::res_7_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RES(7,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::res_7_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RES(7,i);
 M_WRMEM(j,i);
};
void z80cpu::res_7_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RES(7,i);
 M_WRMEM(j,i);
};
void z80cpu::res_7_a(void) { M_RES(7,R.AF.B.h); };
void z80cpu::res_7_b(void) { M_RES(7,R.BC.B.h); };
void z80cpu::res_7_c(void) { M_RES(7,R.BC.B.l); };
void z80cpu::res_7_d(void) { M_RES(7,R.DE.B.h); };
void z80cpu::res_7_e(void) { M_RES(7,R.DE.B.l); };
void z80cpu::res_7_h(void) { M_RES(7,R.HL.B.h); };
void z80cpu::res_7_l(void) { M_RES(7,R.HL.B.l); };

void z80cpu::ret(void) { M_RET; }
void z80cpu::ret_c(void) { if (M_C) { M_RET; } else { M_SKIP_RET; } }
void z80cpu::ret_m(void) { if (M_M) { M_RET; } else { M_SKIP_RET; } }
void z80cpu::ret_nc(void) { if (M_NC) { M_RET; } else { M_SKIP_RET; } }
void z80cpu::ret_nz(void) { if (M_NZ) { M_RET; } else { M_SKIP_RET; } }
void z80cpu::ret_p(void) { if (M_P) { M_RET; } else { M_SKIP_RET; } }
void z80cpu::ret_pe(void) { if (M_PE) { M_RET; } else { M_SKIP_RET; } }
void z80cpu::ret_po(void) { if (M_PO) { M_RET; } else { M_SKIP_RET; } }
void z80cpu::ret_z(void) { if (M_Z) { M_RET; } else { M_SKIP_RET; } }

void z80cpu::reti(void) { Z80_Reti(); M_RET; }
void z80cpu::retn(void) { R.IFF1=R.IFF2; Z80_Retn(); M_RET; }

void z80cpu::rl_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RL(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::rl_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RL(i);
 M_WRMEM(j,i);
}
void z80cpu::rl_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RL(i);
 M_WRMEM(j,i);
}
void z80cpu::rl_a(void) { M_RL(R.AF.B.h); }
void z80cpu::rl_b(void) { M_RL(R.BC.B.h); }
void z80cpu::rl_c(void) { M_RL(R.BC.B.l); }
void z80cpu::rl_d(void) { M_RL(R.DE.B.h); }
void z80cpu::rl_e(void) { M_RL(R.DE.B.l); }
void z80cpu::rl_h(void) { M_RL(R.HL.B.h); }
void z80cpu::rl_l(void) { M_RL(R.HL.B.l); }
void z80cpu::rla(void)  { M_RLA; }

void z80cpu::rlc_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RLC(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::rlc_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RLC(i);
 M_WRMEM(j,i);
}
void z80cpu::rlc_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RLC(i);
 M_WRMEM(j,i);
}
void z80cpu::rlc_a(void) { M_RLC(R.AF.B.h); }
void z80cpu::rlc_b(void) { M_RLC(R.BC.B.h); }
void z80cpu::rlc_c(void) { M_RLC(R.BC.B.l); }
void z80cpu::rlc_d(void) { M_RLC(R.DE.B.h); }
void z80cpu::rlc_e(void) { M_RLC(R.DE.B.l); }
void z80cpu::rlc_h(void) { M_RLC(R.HL.B.h); }
void z80cpu::rlc_l(void) { M_RLC(R.HL.B.l); }
void z80cpu::rlca(void)  { M_RLCA; }

void z80cpu::rld(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_WRMEM(R.HL.D,(i<<4)|(R.AF.B.h&0x0F));
 R.AF.B.h=(R.AF.B.h&0xF0)|(i>>4);
 R.AF.B.l=(R.AF.B.l&C_FLAG)|ZSPTable[R.AF.B.h];
}

void z80cpu::rr_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RR(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::rr_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RR(i);
 M_WRMEM(j,i);
}
void z80cpu::rr_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RR(i);
 M_WRMEM(j,i);
}
void z80cpu::rr_a(void) { M_RR(R.AF.B.h); }
void z80cpu::rr_b(void) { M_RR(R.BC.B.h); }
void z80cpu::rr_c(void) { M_RR(R.BC.B.l); }
void z80cpu::rr_d(void) { M_RR(R.DE.B.h); }
void z80cpu::rr_e(void) { M_RR(R.DE.B.l); }
void z80cpu::rr_h(void) { M_RR(R.HL.B.h); }
void z80cpu::rr_l(void) { M_RR(R.HL.B.l); }
void z80cpu::rra(void)  { M_RRA; }

void z80cpu::rrc_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_RRC(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::rrc_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_RRC(i);
 M_WRMEM(j,i);
}
void z80cpu::rrc_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_RRC(i);
 M_WRMEM(j,i);
}
void z80cpu::rrc_a(void) { M_RRC(R.AF.B.h); }
void z80cpu::rrc_b(void) { M_RRC(R.BC.B.h); }
void z80cpu::rrc_c(void) { M_RRC(R.BC.B.l); }
void z80cpu::rrc_d(void) { M_RRC(R.DE.B.h); }
void z80cpu::rrc_e(void) { M_RRC(R.DE.B.l); }
void z80cpu::rrc_h(void) { M_RRC(R.HL.B.h); }
void z80cpu::rrc_l(void) { M_RRC(R.HL.B.l); }
void z80cpu::rrca(void)  { M_RRCA; }

void z80cpu::rrd(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_WRMEM(R.HL.D,(i>>4)|(R.AF.B.h<<4));
 R.AF.B.h=(R.AF.B.h&0xF0)|(i&0x0F);
 R.AF.B.l=(R.AF.B.l&C_FLAG)|ZSPTable[R.AF.B.h];
}

void z80cpu::rst_00(void) { M_RST(0x00); }
void z80cpu::rst_08(void) { M_RST(0x08); }
void z80cpu::rst_10(void) { M_RST(0x10); }
void z80cpu::rst_18(void) { M_RST(0x18); }
void z80cpu::rst_20(void) { M_RST(0x20); }
void z80cpu::rst_28(void) { M_RST(0x28); }
void z80cpu::rst_30(void) { M_RST(0x30); }
void z80cpu::rst_38(void) { M_RST(0x38); }

void z80cpu::sbc_a_byte(void) { byte i=M_RDMEM_OPCODE(); M_SBC(i); }
void z80cpu::sbc_a_xhl(void) { byte i=M_RD_XHL; M_SBC(i); }
void z80cpu::sbc_a_xix(void) { byte i=M_RD_XIX(); M_SBC(i); }
void z80cpu::sbc_a_xiy(void) { byte i=M_RD_XIY(); M_SBC(i); }
void z80cpu::sbc_a_a(void) { M_SBC(R.AF.B.h); }
void z80cpu::sbc_a_b(void) { M_SBC(R.BC.B.h); }
void z80cpu::sbc_a_c(void) { M_SBC(R.BC.B.l); }
void z80cpu::sbc_a_d(void) { M_SBC(R.DE.B.h); }
void z80cpu::sbc_a_e(void) { M_SBC(R.DE.B.l); }
void z80cpu::sbc_a_h(void) { M_SBC(R.HL.B.h); }
void z80cpu::sbc_a_l(void) { M_SBC(R.HL.B.l); }
void z80cpu::sbc_a_ixh(void) { M_SBC(R.IX.B.h); }
void z80cpu::sbc_a_ixl(void) { M_SBC(R.IX.B.l); }
void z80cpu::sbc_a_iyh(void) { M_SBC(R.IY.B.h); }
void z80cpu::sbc_a_iyl(void) { M_SBC(R.IY.B.l); }

void z80cpu::sbc_hl_bc(void) { M_SBCW(BC); }
void z80cpu::sbc_hl_de(void) { M_SBCW(DE); }
void z80cpu::sbc_hl_hl(void) { M_SBCW(HL); }
void z80cpu::sbc_hl_sp(void) { M_SBCW(SP); }

void z80cpu::scf(void) { R.AF.B.l=(R.AF.B.l&0xEC)|C_FLAG; }

void z80cpu::set_0_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SET(0,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::set_0_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SET(0,i);
 M_WRMEM(j,i);
};
void z80cpu::set_0_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SET(0,i);
 M_WRMEM(j,i);
};
void z80cpu::set_0_a(void) { M_SET(0,R.AF.B.h); };
void z80cpu::set_0_b(void) { M_SET(0,R.BC.B.h); };
void z80cpu::set_0_c(void) { M_SET(0,R.BC.B.l); };
void z80cpu::set_0_d(void) { M_SET(0,R.DE.B.h); };
void z80cpu::set_0_e(void) { M_SET(0,R.DE.B.l); };
void z80cpu::set_0_h(void) { M_SET(0,R.HL.B.h); };
void z80cpu::set_0_l(void) { M_SET(0,R.HL.B.l); };

void z80cpu::set_1_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SET(1,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::set_1_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SET(1,i);
 M_WRMEM(j,i);
};
void z80cpu::set_1_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SET(1,i);
 M_WRMEM(j,i);
};
void z80cpu::set_1_a(void) { M_SET(1,R.AF.B.h); };
void z80cpu::set_1_b(void) { M_SET(1,R.BC.B.h); };
void z80cpu::set_1_c(void) { M_SET(1,R.BC.B.l); };
void z80cpu::set_1_d(void) { M_SET(1,R.DE.B.h); };
void z80cpu::set_1_e(void) { M_SET(1,R.DE.B.l); };
void z80cpu::set_1_h(void) { M_SET(1,R.HL.B.h); };
void z80cpu::set_1_l(void) { M_SET(1,R.HL.B.l); };

void z80cpu::set_2_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SET(2,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::set_2_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SET(2,i);
 M_WRMEM(j,i);
};
void z80cpu::set_2_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SET(2,i);
 M_WRMEM(j,i);
};
void z80cpu::set_2_a(void) { M_SET(2,R.AF.B.h); };
void z80cpu::set_2_b(void) { M_SET(2,R.BC.B.h); };
void z80cpu::set_2_c(void) { M_SET(2,R.BC.B.l); };
void z80cpu::set_2_d(void) { M_SET(2,R.DE.B.h); };
void z80cpu::set_2_e(void) { M_SET(2,R.DE.B.l); };
void z80cpu::set_2_h(void) { M_SET(2,R.HL.B.h); };
void z80cpu::set_2_l(void) { M_SET(2,R.HL.B.l); };

void z80cpu::set_3_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SET(3,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::set_3_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SET(3,i);
 M_WRMEM(j,i);
};
void z80cpu::set_3_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SET(3,i);
 M_WRMEM(j,i);
};
void z80cpu::set_3_a(void) { M_SET(3,R.AF.B.h); };
void z80cpu::set_3_b(void) { M_SET(3,R.BC.B.h); };
void z80cpu::set_3_c(void) { M_SET(3,R.BC.B.l); };
void z80cpu::set_3_d(void) { M_SET(3,R.DE.B.h); };
void z80cpu::set_3_e(void) { M_SET(3,R.DE.B.l); };
void z80cpu::set_3_h(void) { M_SET(3,R.HL.B.h); };
void z80cpu::set_3_l(void) { M_SET(3,R.HL.B.l); };

void z80cpu::set_4_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SET(4,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::set_4_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SET(4,i);
 M_WRMEM(j,i);
};
void z80cpu::set_4_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SET(4,i);
 M_WRMEM(j,i);
};
void z80cpu::set_4_a(void) { M_SET(4,R.AF.B.h); };
void z80cpu::set_4_b(void) { M_SET(4,R.BC.B.h); };
void z80cpu::set_4_c(void) { M_SET(4,R.BC.B.l); };
void z80cpu::set_4_d(void) { M_SET(4,R.DE.B.h); };
void z80cpu::set_4_e(void) { M_SET(4,R.DE.B.l); };
void z80cpu::set_4_h(void) { M_SET(4,R.HL.B.h); };
void z80cpu::set_4_l(void) { M_SET(4,R.HL.B.l); };

void z80cpu::set_5_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SET(5,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::set_5_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SET(5,i);
 M_WRMEM(j,i);
};
void z80cpu::set_5_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SET(5,i);
 M_WRMEM(j,i);
};
void z80cpu::set_5_a(void) { M_SET(5,R.AF.B.h); };
void z80cpu::set_5_b(void) { M_SET(5,R.BC.B.h); };
void z80cpu::set_5_c(void) { M_SET(5,R.BC.B.l); };
void z80cpu::set_5_d(void) { M_SET(5,R.DE.B.h); };
void z80cpu::set_5_e(void) { M_SET(5,R.DE.B.l); };
void z80cpu::set_5_h(void) { M_SET(5,R.HL.B.h); };
void z80cpu::set_5_l(void) { M_SET(5,R.HL.B.l); };

void z80cpu::set_6_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SET(6,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::set_6_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SET(6,i);
 M_WRMEM(j,i);
};
void z80cpu::set_6_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SET(6,i);
 M_WRMEM(j,i);
};
void z80cpu::set_6_a(void) { M_SET(6,R.AF.B.h); };
void z80cpu::set_6_b(void) { M_SET(6,R.BC.B.h); };
void z80cpu::set_6_c(void) { M_SET(6,R.BC.B.l); };
void z80cpu::set_6_d(void) { M_SET(6,R.DE.B.h); };
void z80cpu::set_6_e(void) { M_SET(6,R.DE.B.l); };
void z80cpu::set_6_h(void) { M_SET(6,R.HL.B.h); };
void z80cpu::set_6_l(void) { M_SET(6,R.HL.B.l); };

void z80cpu::set_7_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SET(7,i);
 M_WRMEM(R.HL.D,i);
};
void z80cpu::set_7_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SET(7,i);
 M_WRMEM(j,i);
};
void z80cpu::set_7_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SET(7,i);
 M_WRMEM(j,i);
};
void z80cpu::set_7_a(void) { M_SET(7,R.AF.B.h); };
void z80cpu::set_7_b(void) { M_SET(7,R.BC.B.h); };
void z80cpu::set_7_c(void) { M_SET(7,R.BC.B.l); };
void z80cpu::set_7_d(void) { M_SET(7,R.DE.B.h); };
void z80cpu::set_7_e(void) { M_SET(7,R.DE.B.l); };
void z80cpu::set_7_h(void) { M_SET(7,R.HL.B.h); };
void z80cpu::set_7_l(void) { M_SET(7,R.HL.B.l); };

void z80cpu::sla_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SLA(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::sla_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SLA(i);
 M_WRMEM(j,i);
}
void z80cpu::sla_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SLA(i);
 M_WRMEM(j,i);
}
void z80cpu::sla_a(void) { M_SLA(R.AF.B.h); }
void z80cpu::sla_b(void) { M_SLA(R.BC.B.h); }
void z80cpu::sla_c(void) { M_SLA(R.BC.B.l); }
void z80cpu::sla_d(void) { M_SLA(R.DE.B.h); }
void z80cpu::sla_e(void) { M_SLA(R.DE.B.l); }
void z80cpu::sla_h(void) { M_SLA(R.HL.B.h); }
void z80cpu::sla_l(void) { M_SLA(R.HL.B.l); }

void z80cpu::sll_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SLL(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::sll_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SLL(i);
 M_WRMEM(j,i);
}
void z80cpu::sll_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SLL(i);
 M_WRMEM(j,i);
}
void z80cpu::sll_a(void) { M_SLL(R.AF.B.h); }
void z80cpu::sll_b(void) { M_SLL(R.BC.B.h); }
void z80cpu::sll_c(void) { M_SLL(R.BC.B.l); }
void z80cpu::sll_d(void) { M_SLL(R.DE.B.h); }
void z80cpu::sll_e(void) { M_SLL(R.DE.B.l); }
void z80cpu::sll_h(void) { M_SLL(R.HL.B.h); }
void z80cpu::sll_l(void) { M_SLL(R.HL.B.l); }

void z80cpu::sra_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SRA(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::sra_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SRA(i);
 M_WRMEM(j,i);
}
void z80cpu::sra_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SRA(i);
 M_WRMEM(j,i);
}
void z80cpu::sra_a(void) { M_SRA(R.AF.B.h); }
void z80cpu::sra_b(void) { M_SRA(R.BC.B.h); }
void z80cpu::sra_c(void) { M_SRA(R.BC.B.l); }
void z80cpu::sra_d(void) { M_SRA(R.DE.B.h); }
void z80cpu::sra_e(void) { M_SRA(R.DE.B.l); }
void z80cpu::sra_h(void) { M_SRA(R.HL.B.h); }
void z80cpu::sra_l(void) { M_SRA(R.HL.B.l); }

void z80cpu::srl_xhl(void)
{
 byte i;
 i=M_RDMEM(R.HL.D);
 M_SRL(i);
 M_WRMEM(R.HL.D,i);
}
void z80cpu::srl_xix(void)
{
 byte i;
 int j;
 j=M_XIX;
 i=M_RDMEM(j);
 M_SRL(i);
 M_WRMEM(j,i);
}
void z80cpu::srl_xiy(void)
{
 byte i;
 int j;
 j=M_XIY;
 i=M_RDMEM(j);
 M_SRL(i);
 M_WRMEM(j,i);
}
void z80cpu::srl_a(void) { M_SRL(R.AF.B.h); }
void z80cpu::srl_b(void) { M_SRL(R.BC.B.h); }
void z80cpu::srl_c(void) { M_SRL(R.BC.B.l); }
void z80cpu::srl_d(void) { M_SRL(R.DE.B.h); }
void z80cpu::srl_e(void) { M_SRL(R.DE.B.l); }
void z80cpu::srl_h(void) { M_SRL(R.HL.B.h); }
void z80cpu::srl_l(void) { M_SRL(R.HL.B.l); }

void z80cpu::sub_xhl(void) { byte i=M_RD_XHL; M_SUB(i); }
void z80cpu::sub_xix(void) { byte i=M_RD_XIX(); M_SUB(i); }
void z80cpu::sub_xiy(void) { byte i=M_RD_XIY(); M_SUB(i); }
void z80cpu::sub_a(void) { R.AF.D=Z_FLAG|N_FLAG; }
void z80cpu::sub_b(void) { M_SUB(R.BC.B.h); }
void z80cpu::sub_c(void) { M_SUB(R.BC.B.l); }
void z80cpu::sub_d(void) { M_SUB(R.DE.B.h); }
void z80cpu::sub_e(void) { M_SUB(R.DE.B.l); }
void z80cpu::sub_h(void) { M_SUB(R.HL.B.h); }
void z80cpu::sub_l(void) { M_SUB(R.HL.B.l); }
void z80cpu::sub_ixh(void) { M_SUB(R.IX.B.h); }
void z80cpu::sub_ixl(void) { M_SUB(R.IX.B.l); }
void z80cpu::sub_iyh(void) { M_SUB(R.IY.B.h); }
void z80cpu::sub_iyl(void) { M_SUB(R.IY.B.l); }
void z80cpu::sub_byte(void) { byte i=M_RDMEM_OPCODE(); M_SUB(i); }

void z80cpu::xor_xhl(void) { byte i=M_RD_XHL; M_XOR(i); }
void z80cpu::xor_xix(void) { byte i=M_RD_XIX(); M_XOR(i); }
void z80cpu::xor_xiy(void) { byte i=M_RD_XIY(); M_XOR(i); }
void z80cpu::xor_a(void) { R.AF.D=Z_FLAG|V_FLAG; }
void z80cpu::xor_b(void) { M_XOR(R.BC.B.h); }
void z80cpu::xor_c(void) { M_XOR(R.BC.B.l); }
void z80cpu::xor_d(void) { M_XOR(R.DE.B.h); }
void z80cpu::xor_e(void) { M_XOR(R.DE.B.l); }
void z80cpu::xor_h(void) { M_XOR(R.HL.B.h); }
void z80cpu::xor_l(void) { M_XOR(R.HL.B.l); }
void z80cpu::xor_ixh(void) { M_XOR(R.IX.B.h); }
void z80cpu::xor_ixl(void) { M_XOR(R.IX.B.l); }
void z80cpu::xor_iyh(void) { M_XOR(R.IY.B.h); }
void z80cpu::xor_iyl(void) { M_XOR(R.IY.B.l); }
void z80cpu::xor_byte(void) { byte i=M_RDMEM_OPCODE(); M_XOR(i); }

void z80cpu::no_op(void)
{
 --R.PC.W.l;
}

void z80cpu::patch(void) { Z80_Patch(&R); }

static unsigned cycles_main[256]=
{
  4,10,7,6,4,4,7,4,
  4,11,7,6,4,4,7,4,
  8,10,7,6,4,4,7,4,
  7,11,7,6,4,4,7,4,
  7,10,16,6,4,4,7,4,
  7,11,16,6,4,4,7,4,
  7,10,13,6,11,11,10,4,
  7,11,13,6,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  7,7,7,7,7,7,4,7,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  4,4,4,4,4,4,7,4,
  5,10,10,10,10,11,7,11,
  5,4,10,0,10,10,7,11,
  5,10,10,11,10,11,7,11,
  5,4,10,11,10,0,7,11,
  5,10,10,19,10,11,7,11,
  5,4,10,4,10,0,7,11,
  5,10,10,4,10,11,7,11,
  5,6,10,4,10,0,7,11
};

static unsigned cycles_cb[256]=
{
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,12,8,
  8,8,8,8,8,8,12,8,
  8,8,8,8,8,8,12,8,
  8,8,8,8,8,8,12,8,
  8,8,8,8,8,8,12,8,
  8,8,8,8,8,8,12,8,
  8,8,8,8,8,8,12,8,
  8,8,8,8,8,8,12,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8,
  8,8,8,8,8,8,15,8
};
static unsigned cycles_xx_cb[]=
{
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  20,20,20,20,20,20,20,20,
  20,20,20,20,20,20,20,20,
  20,20,20,20,20,20,20,20,
  20,20,20,20,20,20,20,20,
  20,20,20,20,20,20,20,20,
  20,20,20,20,20,20,20,20,
  20,20,20,20,20,20,20,20,
  20,20,20,20,20,20,20,20,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0,
  0,0,0,0,0,0,23,0
};
static unsigned cycles_xx[256]=
{
  0,0,0,0,0,0,0,0,
  0,15,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,15,0,0,0,0,0,0,
  0,14,20,10,9,9,9,0,
  0,15,20,10,9,9,9,0,
  0,0,0,0,23,23,19,0,
  0,15,0,0,0,0,0,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  9,9,9,9,9,9,9,9,
  9,9,9,9,9,9,9,9,
  19,19,19,19,19,19,19,19,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,9,9,19,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,14,0,23,0,15,0,0,
  0,8,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,10,0,0,0,0,0,0
};
static unsigned cycles_ed[256]=
{
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  12,12,15,20,8,8,8,9,
  12,12,15,20,8,8,8,9,
  12,12,15,20,8,8,8,9,
  12,12,15,20,8,8,8,9,
  12,12,15,20,8,8,8,18,
  12,12,15,20,8,8,8,18,
  12,12,15,20,8,8,8,0,
  12,12,15,20,8,8,8,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  16,16,16,16,0,0,0,0,
  16,16,16,16,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0
};

void z80cpu::no_op_xx(void) {
++R.PC.W.l; }

void z80cpu::dd_cb(void)
{
 unsigned opcode;
 opcode=M_RDOP_ARG((R.PC.D+1)&0xFFFF);
 Z80_ICount-=cycles_xx_cb[opcode];
 callZ80Function(this, opcode_dd_cb[opcode])();
 ++R.PC.W.l;
};
void z80cpu::fd_cb(void)
{
 unsigned opcode;
 opcode=M_RDOP_ARG((R.PC.D+1)&0xFFFF);
 Z80_ICount-=cycles_xx_cb[opcode];
 callZ80Function(this, opcode_fd_cb[opcode])();
 ++R.PC.W.l;
};

void z80cpu::cb(void)
{
 unsigned opcode;
 ++R.R;
 opcode=M_RDOP(R.PC.D);
 R.PC.W.l++;
 Z80_ICount-=cycles_cb[opcode];
 callZ80Function(this, opcode_cb[opcode])();
}

void z80cpu::dd(void)
{
 unsigned opcode;
 ++R.R;
 opcode=M_RDOP(R.PC.D);
 R.PC.W.l++;
 Z80_ICount-=cycles_xx[opcode];
 callZ80Function(this, opcode_dd[opcode])();
}

void z80cpu::ed(void)
{
 unsigned opcode;
 ++R.R;
 opcode=M_RDOP(R.PC.D);
 R.PC.W.l++;
 Z80_ICount-=cycles_ed[opcode];
 callZ80Function(this, opcode_ed[opcode])();
}

void z80cpu::fd (void)
{
 unsigned opcode;
 ++R.R;
 opcode=M_RDOP(R.PC.D);
 R.PC.W.l++;
 Z80_ICount-=cycles_xx[opcode];
 callZ80Function(this, opcode_fd[opcode])();
}

void z80cpu::ei(void)
{
 unsigned opcode;
 /* If interrupts were disabled, execute one more instruction and check the */
 /* IRQ line. If not, simply set interrupt flip-flop 2                      */
 if (!R.IFF1)
 {
#ifdef DEBUG
  if (R.PC.D==Z80_Trap) Z80_Trace=1;
  if (Z80_Trace) Z80_Debug(&R);
#endif
  R.IFF1=R.IFF2=1;
  ++R.R;
  opcode=M_RDOP(R.PC.D);
  R.PC.W.l++;
  Z80_ICount-=cycles_main[opcode];
  callZ80Function(this, opcode_main[opcode])();
  Interrupt(Z80_IRQ);
 }
 else
  R.IFF2=1;
}

/****************************************************************************/
/* Reset registers to their initial values                                  */
/****************************************************************************/
z80cpu::z80cpu()
{
 Z80_Running=0;
 Z80_IPeriod=50000;
 Z80_ICount=50000;
 InitTables();
}

z80cpu::~z80cpu()
{
}

void z80cpu::Z80_Reset (void)
{
 memset (&R,0,sizeof(Z80_Regs));
 Z80_IRQ=Z80_IGNORE_INT;
 R.SP.D=0xF000;
 R.R=rand();
 Z80_ICount=Z80_IPeriod=20000;
}

/****************************************************************************/
/* Initialise the various lookup tables used by the emulation code          */
/****************************************************************************/
void z80cpu::InitTables (void)
{
 byte zs;
 int i,p;

 for (i=0;i<256;++i)
 {
  zs=0;
  if (i==0)
   zs|=Z_FLAG;
  if (i&0x80)
   zs|=S_FLAG;
  p=0;
  if (i&1) ++p;
  if (i&2) ++p;
  if (i&4) ++p;
  if (i&8) ++p;
  if (i&16) ++p;
  if (i&32) ++p;
  if (i&64) ++p;
  if (i&128) ++p;
  PTable[i]=(p&1)? 0:V_FLAG;
  ZSTable[i]=zs;
  ZSPTable[i]=zs|PTable[i];
 }
 for (i=0;i<256;++i)
 {
  ZSTable[i+256]=ZSTable[i]|C_FLAG;
  ZSPTable[i+256]=ZSPTable[i]|C_FLAG;
  PTable[i+256]=PTable[i]|C_FLAG;
 }
}

/****************************************************************************/
/* Issue an interrupt if necessary                                          */
/****************************************************************************/
void z80cpu::Interrupt (int j)
{
 if (j==Z80_IGNORE_INT) return;
 if (j==Z80_NMI_INT || R.IFF1)
 {
  /* Clear interrupt flip-flop 1 */
  R.IFF1=0;
  /* Check if processor was halted */
  if (R.HALT)
  {
   ++R.PC.W.l;
   R.HALT=0;
  }
  if (j==Z80_NMI_INT)
  {
   M_PUSH (PC);
   R.PC.D=0x0066;
  }
  else
  {
   /* Interrupt mode 2. Call [R.I:databyte] */
   if (R.IM==2)
   {
    M_PUSH (PC);
    R.PC.D=M_RDMEM_WORD((j&255)|(R.I<<8));
   }
   else
    /* Interrupt mode 1. RST 38h */
    if (R.IM==1)
    {
     Z80_ICount-=cycles_main[0xFF];
     callZ80Function(this, opcode_main[0xFF])();
    }
    else
    /* Interrupt mode 0. We check for CALL and JP instructions, if neither  */
    /* of these were found we assume a 1 byte opcode was placed on the      */
    /* databus                                                              */
    {
     switch (j&0xFF0000)
     {
      case 0xCD:
       M_PUSH(PC);
      case 0xC3:
       R.PC.D=j&0xFFFF;
       break;
      default:
       j&=255;
       Z80_ICount-=cycles_main[j];
       callZ80Function(this, opcode_main[j])();
       break;
     }
    }
  }
 }
}

/****************************************************************************/
/* Set all registers to given values                                        */
/****************************************************************************/
void z80cpu::Z80_SetRegs (Z80_Regs *Regs)
{
 R=*Regs;
}

/****************************************************************************/
/* Get all registers in given buffer                                        */
/****************************************************************************/
void z80cpu::Z80_GetRegs (Z80_Regs *Regs)
{
 *Regs=R;
}

/****************************************************************************/
/* Return program counter                                                   */
/****************************************************************************/
unsigned z80cpu::Z80_GetPC (void)
{
 return R.PC.D;
}

/****************************************************************************/
/* Execute IPeriod T-States. Return 0 if emulation should be stopped        */
/****************************************************************************/
int z80cpu::Z80_Execute (void)
{
 int oldcycs;
 unsigned opcode;
 Z80_Running=1;
 do
 {
  ++R.R;
  oldcycs=Z80_ICount;
  opcode=M_RDOP(R.PC.D);
  R.PC.W.l++;
  Z80_ICount-=cycles_main[opcode];
  callZ80Function(this, opcode_main[opcode])();
//  if (Z80_InstHook(oldcycs-Z80_ICount))
    Interrupt(Z80_Interrupt());
 }
 while (Z80_ICount>0);
 Z80_ICount+=Z80_IPeriod;
 return Z80_Running;
}

/****************************************************************************/
/* Execute Single Instruction. Return no of cycles executed                 */
/****************************************************************************/
int z80cpu::Z80_Step (void)
{
 unsigned opcode;
 int oldcycs, ret;
 Z80_Running=1;

 ++R.R;
 oldcycs=Z80_ICount;
 opcode=M_RDOP(R.PC.D);
 R.PC.W.l++;
 Z80_ICount-=cycles_main[opcode];
 callZ80Function(this, opcode_main[opcode])();
 Interrupt(Z80_Interrupt());

 ret=oldcycs-Z80_ICount;
 oldcycs+=Z80_ICount;
 if (Z80_ICount<=0)
  Z80_ICount+=Z80_IPeriod;

 return ret;
}
/****************************************************************************/
/* Interpret Z80 code                                                       */
/****************************************************************************/
word z80cpu::Z80 (void)
{
 while (Z80_Execute());
 return(R.PC.W.l);
}

/****************************************************************************/
/* Set number of memory refresh wait states (i.e. extra cycles inserted     */
/* when the refresh register is being incremented)                          */
/****************************************************************************/
void z80cpu::Z80_SetWaitStates (int n)
{
 int i;
 for (i=0;i<256;++i)
 {
  cycles_main[i]+=n;
  cycles_cb[i]+=n;
  cycles_ed[i]+=n;
  cycles_xx[i]+=n;
 }
}

static char Sign (unsigned char a)
{
 return (a&128)? '-':'+';
}

static int Abs (unsigned char a)
{
 if (a&128) return 256-a;
 else return a;
}

/****************************************************************************/
/* Disassemble first opcode in buffer and return number of bytes it takes   */
/****************************************************************************/
int z80cpu::Z80_Dasm (unsigned char *buffer,char *dest,unsigned PC)
{
 char *S;
 char *r;
 int i,j,k;
 unsigned char buf[10], dis[30];
 char Offset;
 i=Offset=0;
 r="INTERNAL PROGRAM ERROR";
 dest[0]='\0';
 sprintf(dis, "%04x: ", PC);

 switch (buffer[i])
 {
  case 0xCB:
   i++;
   S=mnemonic_cb[buffer[i++]];
   break;
  case 0xED:
   i++;
   S=mnemonic_ed[buffer[i++]];
   break;
  case 0xDD:
   i++;
   r="ix";
   switch (buffer[i])
   {
    case 0xcb:
     i++;
     Offset=buffer[i++];
     S=mnemonic_xx_cb[buffer[i++]];
     break;
    default:
     S=mnemonic_xx[buffer[i++]];
     break;
   }
   break;
  case 0xFD:
   i++;
   r="iy";
   switch (buffer[i])
   {
    case 0xcb:
     i++;
     Offset=buffer[i++];
     S=mnemonic_xx_cb[buffer[i++]];
     break;
    default:
     S=mnemonic_xx[buffer[i++]];
     break;
   }
   break;
  default:
   S=mnemonic_main[buffer[i++]];
   break;
 }
 for (j=0;S[j];++j)
 {
  switch (S[j])
  {
   case 'B':
    sprintf (buf,"$%02x",buffer[i++]);
    strcat (dest,buf);
    break;
   case 'R':
    sprintf (buf,"$%04x",(PC+2+(signed char)buffer[i])&0xFFFF);
    i++;
    strcat (dest,buf);
    break;
   case 'W':
    sprintf (buf,"$%04x",buffer[i]+buffer[i+1]*256);
    i+=2;
    strcat (dest,buf);
    break;
   case 'X':
    sprintf (buf,"(%s%c$%02x)",r,Sign(buffer[i]),Abs(buffer[i]));
    i++;
    strcat (dest,buf);
    break;
   case 'Y':
    sprintf (buf,"(%s%c$%02x)",r,Sign(Offset),Abs(Offset));
    strcat (dest,buf);
    break;
   case 'I':
    strcat (dest,r);
    break;
   case '!':
    sprintf (dest,"db     $ed,$%02x",buffer[1]);
    return 2;
   case '@':
    sprintf (dest,"db     $%02x",buffer[0]);
    return 1;
   case '#':
    sprintf (dest,"db     $%02x,$cb,$%02x",buffer[0],buffer[2]);
    return 2;
   case ' ':
    k=strlen(dest);
    if (k<6) k=7-k;
    else k=1;
    memset (buf,' ',k);
    buf[k]='\0';
    strcat (dest,buf);
    break;
   default:
    buf[0]=S[j];
    buf[1]='\0';
    strcat (dest,buf);
    break;
  }
 }

 for (j=0; j<i; j++) {
  sprintf(buf, "%02x ", buffer[j]);
  strcat(dis, buf);
 }
 if (i<6) {
  for (j=i; j<6; j++)
    strcat(dis, "   ");
 }

 strcat(dis, dest);
 strcpy(dest, dis);
 return i;
}
