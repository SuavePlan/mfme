//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include <stdio.h>
#include "procondisplay.h"
//---------------------------------------------------------------------------
#pragma link "GR32_Image"
#pragma link "GR32_Add_Blendmodes"
#pragma package(smart_init)
//---------------------------------------------------------------------------
// ValidCtrCheck is used to assure that the components created do not have
// any pure virtual functions.
//

static Byte charset[][6] = {
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // - 0
  { 0x7e,0x11,0x11,0x11,0x7e,0x00 }, // A 1
  { 0x7f,0x49,0x49,0x49,0x36,0x00 }, // B 2
  { 0x3e,0x41,0x41,0x41,0x22,0x00 }, // C 3
  { 0x7f,0x41,0x41,0x22,0x1c,0x00 }, // D 4
  { 0x7f,0x49,0x49,0x49,0x41,0x00 }, // E 5
  { 0x7f,0x09,0x09,0x09,0x01,0x00 }, // F 6
  { 0x3e,0x41,0x49,0x49,0x7a,0x00 }, // G 7
  { 0x7f,0x08,0x08,0x08,0x7f,0x00 }, // H 8
  { 0x00,0x41,0x7f,0x41,0x00,0x00 }, // I 9
  { 0x20,0x40,0x41,0x3f,0x01,0x00 }, // J a
  { 0x7f,0x08,0x14,0x22,0x41,0x00 }, // K b
  { 0x7f,0x40,0x40,0x40,0x40,0x00 }, // L c
  { 0x7f,0x02,0x0c,0x02,0x7f,0x00 }, // M d
  { 0x7f,0x04,0x08,0x10,0x7f,0x00 }, // N e
  { 0x3e,0x41,0x41,0x41,0x3e,0x00 }, // O f
  { 0x7f,0x09,0x09,0x09,0x06,0x00 }, // P 10
  { 0x3e,0x41,0x51,0x21,0x5e,0x00 }, // Q 11
  { 0x7f,0x09,0x19,0x29,0x46,0x00 }, // R 12
  { 0x46,0x49,0x49,0x49,0x31,0x00 }, // S 13
  { 0x01,0x01,0x7f,0x01,0x01,0x00 }, // T 14
  { 0x3f,0x40,0x40,0x40,0x3f,0x00 }, // U 15
  { 0x1f,0x20,0x40,0x20,0x1f,0x00 }, // V 16
  { 0x3f,0x40,0x38,0x40,0x3f,0x00 }, // W 17
  { 0x63,0x14,0x08,0x14,0x63,0x00 }, // X 18
  { 0x07,0x08,0x78,0x08,0x07,0x00 }, // Y 19
  { 0x61,0x51,0x49,0x45,0x43,0x00 }, // Z 1a
  { 0x7f,0x41,0x41,0x41,0x41,0x00 }, // [ 1b
  { 0x02,0x04,0x08,0x10,0x20,0x00 }, //   1c
  { 0x41,0x41,0x41,0x41,0x7f,0x00 }, // ] 1d
  { 0x04,0x02,0x01,0x02,0x04,0x00 }, // ^ 1e
  { 0x00,0x00,0x5f,0x00,0x00,0x00 }, // ! 1f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP20
  { 0x00,0x00,0x5f,0x00,0x00,0x00 }, // ! 21
  { 0x00,0x07,0x00,0x07,0x00,0x00 }, // " 22
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // ? 23
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // ? 24
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP25
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP26
  { 0x00,0x05,0x03,0x00,0x00,0x00 }, // ' 27
  { 0x08,0x14,0x22,0x41,0x00,0x00 }, // < 28
  { 0x00,0x41,0x22,0x14,0x08,0x00 }, // > 29
  { 0x14,0x08,0x3e,0x08,0x14,0x00 }, // * 2a
  { 0x08,0x08,0x3e,0x08,0x08,0x00 }, // + 2b
  { 0x00,0x00,0x00,0x00,0x00,0x40 }, // , 2c
  { 0x08,0x08,0x08,0x08,0x08,0x00 }, // - 2d
  { 0x00,0xe0,0xe0,0x00,0x00,0x00 }, // . 2e
  { 0x20,0x10,0x08,0x04,0x02,0x00 }, // / 2f
  { 0x3e,0x51,0x49,0x45,0x3e,0x00 }, // 0 30
  { 0x00,0x42,0x7f,0x40,0x00,0x00 }, // 1 31
  { 0x42,0x61,0x51,0x49,0x46,0x00 }, // 2 32
  { 0x21,0x41,0x45,0x4b,0x31,0x00 }, // 3 33
  { 0x18,0x14,0x12,0x7f,0x10,0x00 }, // 4 34
  { 0x27,0x45,0x45,0x45,0x39,0x00 }, // 5 35
  { 0x3c,0x4a,0x49,0x49,0x30,0x00 }, // 6 36
  { 0x01,0x71,0x09,0x05,0x03,0x00 }, // 7 37
  { 0x36,0x49,0x49,0x49,0x36,0x00 }, // 8 38
  { 0x06,0x49,0x49,0x29,0x1e,0x00 }, // 9 39
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP3a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP3b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // 5 3c
  { 0x14,0x14,0x14,0x14,0x14,0x00 }, // = 3d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // 5 3e
  { 0x02,0x01,0x51,0x09,0x06,0x00 }, // ? 3f
  { 0x32,0x49,0x79,0x41,0x3e,0x00 }, // @ 40
  { 0x7e,0x11,0x11,0x11,0x7e,0x00 }, // A 41
  { 0x7f,0x49,0x49,0x49,0x36,0x00 }, // B 42
  { 0x3e,0x41,0x41,0x41,0x22,0x00 }, // C 43
  { 0x7f,0x41,0x41,0x22,0x1c,0x00 }, // D 44
  { 0x7f,0x49,0x49,0x49,0x41,0x00 }, // E 45
  { 0x7f,0x09,0x09,0x09,0x01,0x00 }, // F 46
  { 0x3e,0x41,0x49,0x49,0x7a,0x00 }, // G 47
  { 0x7f,0x08,0x08,0x08,0x7f,0x00 }, // H 48
  { 0x00,0x41,0x7f,0x41,0x00,0x00 }, // I 49
  { 0x20,0x40,0x41,0x3f,0x01,0x00 }, // J 4a
  { 0x7f,0x08,0x14,0x22,0x41,0x00 }, // K 4b
  { 0x7f,0x40,0x40,0x40,0x40,0x00 }, // L 4c
  { 0x7f,0x02,0x0c,0x02,0x7f,0x00 }, // M 4d
  { 0x7f,0x04,0x08,0x10,0x7f,0x00 }, // N 4e
  { 0x3e,0x41,0x41,0x41,0x3e,0x00 }, // O 4f
  { 0x7f,0x09,0x09,0x09,0x06,0x00 }, // P 50
  { 0x3e,0x41,0x51,0x21,0x5e,0x00 }, // Q 51
  { 0x7f,0x09,0x19,0x29,0x46,0x00 }, // R 52
  { 0x46,0x49,0x49,0x49,0x31,0x00 }, // S 53
  { 0x01,0x01,0x7f,0x01,0x01,0x00 }, // T 54
  { 0x3f,0x40,0x40,0x40,0x3f,0x00 }, // U 55
  { 0x1f,0x20,0x40,0x20,0x1f,0x00 }, // V 56
  { 0x3f,0x40,0x38,0x40,0x3f,0x00 }, // W 57
  { 0x63,0x14,0x08,0x14,0x63,0x00 }, // X 58
  { 0x07,0x08,0x78,0x08,0x07,0x00 }, // Y 59
  { 0x61,0x51,0x49,0x45,0x43,0x00 }, // Z 5a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5c
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5e
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   60
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   61
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   62
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   63
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   64
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   65
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   66
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   67
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   68
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   69
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6c
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6e
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   70
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   71
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   72
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   73
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   74
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   75
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   76
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   77
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   78
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   79
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7c
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7e
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   80
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   81
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   82
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   83
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   84
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   85
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   86
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   87
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   88
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   89
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   8a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   8b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   8c
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   8d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   8e
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   8f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   90
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   91
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   92
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   93
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   94
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   95
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   96
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   97
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   98
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   99
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   9a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   9b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   9c
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   9d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   9e
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   9f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a0
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a1
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a2
  { 0x48,0x7e,0x49,0x41,0x42,0x00 }, // £ a3
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a4
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a5
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a6
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a7
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a8
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   a9
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   aa
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ab
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ac
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ad
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ae
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   af
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b0
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b1
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b2
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b3
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b4
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b5
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b6
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b7
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b8
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   b9
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ba
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   bb
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   bc
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   bd
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   be
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   bf
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c0
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c1
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c2
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c3
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c4
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c5
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c6
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c7
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c8
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   c9
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ca
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   cb
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   cc
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   cd
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ce
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   cf
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d0
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d1
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d2
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d3
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d4
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d5
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d6
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d7
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d8
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   d9
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   da
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   db
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   dc
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   dd
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   de
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   df
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e0
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e1
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e2
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e3
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e4
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e5
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e6
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e7
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e8
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   e9
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ea
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   eb
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ec
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ed
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ee
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   ef
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f0
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f1
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f2
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f3
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f4
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f5
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f6
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f7
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f8
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   f9
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   fa
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   fb
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   fc
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   fd
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   fe
  { 0x00,0x00,0x00,0x00,0x00,0x00 }  //   ff
};

static inline void ValidCtrCheck(TPROCONLED *)
{
    new TPROCONLED(NULL);
}
//---------------------------------------------------------------------------
__fastcall TPROCONLED::TPROCONLED(TComponent* Owner)
    : TImage32(Owner)
{
  FSize = 3;
  Src = new TBitmap32();
  memset( map, 0, sizeof(map));
  Init();
  ScaleMode = Gr32_image::smStretch;
  TImage32::Bitmap->StretchFilter = sfNearest;
}
//---------------------------------------------------------------------------
__fastcall TPROCONLED::~TPROCONLED()
{
  delete Src;
}
//---------------------------------------------------------------------------
void __fastcall TPROCONLED::Loaded(void)
{
  Draw();
}
//---------------------------------------------------------------------------
void __fastcall TPROCONLED::SetPixel(int nbr, bool state)
{
  if ( state )
    map[nbr] = 1;
  else
    map[nbr] = 0;
  Draw();
  Invalidate();
}
//---------------------------------------------------------------------------
void __fastcall TPROCONLED::SetMap(Byte *ptr)
{
  memcpy(newmap, ptr, 80);
  Draw();
  Invalidate();
}
//---------------------------------------------------------------------------
void __fastcall TPROCONLED::SetSize(int ASize)
{
  if ( ASize != FSize ) {
    FSize = ASize;
    memset( map, 0, sizeof(map));
    Init();
    Draw();
    Invalidate();
  }
}
//---------------------------------------------------------------------------
void __fastcall TPROCONLED::Draw(void)
{
int x, y, i, j;
int xpos, ypos;
//int pos;
int mask = 0x01;
Byte *ptr;
Byte *nptr = newmap;
Byte *optr = map;
bool updated = false;

  for ( y = 0; y < 4; y++ ) {
    for ( x = 0; x < 20; x++ ) {
      if ( *nptr != *optr ) {
        *optr = *nptr;
        ptr = &charset[*nptr][0];
        xpos = 2 + x + x + ( 5 * FSize * x);
        for ( j = 0; j < 5; j++ ) {
          ypos = 2 + y + y + (7 * FSize * y);
          mask = 1;
          for ( i = 0; i < 7; i++ ) {
            if ( *ptr & mask )
              Src->FillRect( xpos, ypos, xpos + FSize - Spacing, ypos + FSize - Spacing, clLime32);
            else
              Src->FillRect( xpos, ypos, xpos + FSize - Spacing, ypos + FSize - Spacing, clBlack32);
            mask <<= 1;
            ypos += FSize;
          }
          xpos += FSize;
          ptr++;
        }
      }
      optr++;
      nptr++;
    }
  }
}
//---------------------------------------------------------------------------
void __fastcall TPROCONLED::Paint(void)
{
  BeginUpdate();
  TImage32::Bitmap->Draw(0,0,Src);
  EndUpdate();
  TImage32::Paint();
}
//---------------------------------------------------------------------------
void __fastcall TPROCONLED::Init(void)
{
  if ( FSize > 4 )
    Spacing = 2;
  else
    Spacing = 1;
  Width = 40 + 100 * FSize + 4;
  Height = 8 + 28 * FSize + 4;
  Src->Width = Width;
  Src->Height = Height;
  Bitmap->Width = Width;
  Bitmap->Height = Height;
  Src->Clear();
}
