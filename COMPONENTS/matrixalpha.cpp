//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include <stdio.h>
#include "matrixalpha.h"
//---------------------------------------------------------------------------
#pragma link "GR32_Image"
#pragma link "GR32_Add_Blendmodes"
#pragma package(smart_init)
//---------------------------------------------------------------------------
// ValidCtrCheck is used to assure that the components created do not have
// any pure virtual functions.
//

static Byte charset[][6] = {
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // - 0
  { 0x7e,0x11,0x11,0x11,0x7e,0x00 }, // A 1
  { 0x7f,0x49,0x49,0x49,0x36,0x00 }, // B 2
  { 0x3e,0x41,0x41,0x41,0x22,0x00 }, // C 3
  { 0x7f,0x41,0x41,0x22,0x1c,0x00 }, // D 4
  { 0x7f,0x49,0x49,0x49,0x41,0x00 }, // E 5
  { 0x7f,0x09,0x09,0x09,0x01,0x00 }, // F 6
  { 0x3e,0x41,0x49,0x49,0x7a,0x00 }, // G 7
  { 0x7f,0x08,0x08,0x08,0x7f,0x00 }, // H 8
  { 0x00,0x41,0x7f,0x41,0x00,0x00 }, // I 9
  { 0x20,0x40,0x41,0x3f,0x01,0x00 }, // J a
  { 0x7f,0x08,0x14,0x22,0x41,0x00 }, // K b
  { 0x7f,0x40,0x40,0x40,0x40,0x00 }, // L c
  { 0x7f,0x02,0x0c,0x02,0x7f,0x00 }, // M d
  { 0x7f,0x04,0x08,0x10,0x7f,0x00 }, // N e
  { 0x3e,0x41,0x41,0x41,0x3e,0x00 }, // O f
  { 0x7f,0x09,0x09,0x09,0x06,0x00 }, // P 10
  { 0x3e,0x41,0x51,0x21,0x5e,0x00 }, // Q 11
  { 0x7f,0x09,0x19,0x29,0x46,0x00 }, // R 12
  { 0x46,0x49,0x49,0x49,0x31,0x00 }, // S 13
  { 0x01,0x01,0x7f,0x01,0x01,0x00 }, // T 14
  { 0x3f,0x40,0x40,0x40,0x3f,0x00 }, // U 15
  { 0x1f,0x20,0x40,0x20,0x1f,0x00 }, // V 16
  { 0x3f,0x40,0x38,0x40,0x3f,0x00 }, // W 17
  { 0x63,0x14,0x08,0x14,0x63,0x00 }, // X 18
  { 0x07,0x08,0x78,0x08,0x07,0x00 }, // Y 19
  { 0x61,0x51,0x49,0x45,0x43,0x00 }, // Z 1a
  { 0x7f,0x41,0x41,0x41,0x41,0x00 }, // [ 1b
  { 0x02,0x04,0x08,0x10,0x20,0x00 }, //   1c
  { 0x41,0x41,0x41,0x41,0x7f,0x00 }, // ] 1d
  { 0x04,0x02,0x01,0x02,0x04,0x00 }, // ^ 1e
  { 0x48,0x7e,0x49,0x41,0x42,0x00 }, // £ 1f //{ 0x40,0x40,0x40,0x40,0x40,0x00 }, // _ 1f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP20
  { 0x48,0x7e,0x49,0x41,0x42,0x00 }, // £ 21
  { 0x00,0x07,0x00,0x07,0x00,0x00 }, // " 22
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // ? 23
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // ? 24
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP25
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP26
  { 0x00,0x05,0x03,0x00,0x00,0x00 }, // ' 27
  { 0x08,0x14,0x22,0x41,0x00,0x00 }, // < 28
  { 0x00,0x41,0x22,0x14,0x08,0x00 }, // > 29
  { 0x14,0x08,0x3e,0x08,0x14,0x00 }, // * 2a
  { 0x08,0x08,0x3e,0x08,0x08,0x00 }, // + 2b
  { 0x00,0x00,0x00,0x00,0x00,0x40 }, // , 2c
  { 0x08,0x08,0x08,0x08,0x08,0x00 }, // - 2d
  { 0x00,0x00,0x00,0x00,0x00,0x40 }, // . 2e
  { 0x20,0x10,0x08,0x04,0x02,0x00 }, // / 2f
  { 0x3e,0x51,0x49,0x45,0x3e,0x00 }, // 0 30
  { 0x00,0x42,0x7f,0x40,0x00,0x00 }, // 1 31
  { 0x42,0x61,0x51,0x49,0x46,0x00 }, // 2 32
  { 0x21,0x41,0x45,0x4b,0x31,0x00 }, // 3 33
  { 0x18,0x14,0x12,0x7f,0x10,0x00 }, // 4 34
  { 0x27,0x45,0x45,0x45,0x39,0x00 }, // 5 35
  { 0x3c,0x4a,0x49,0x49,0x30,0x00 }, // 6 36
  { 0x01,0x71,0x09,0x05,0x03,0x00 }, // 7 37
  { 0x36,0x49,0x49,0x49,0x36,0x00 }, // 8 38
  { 0x06,0x49,0x49,0x29,0x1e,0x00 }, // 9 39
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP3a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // SP3b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // 5 3c
  { 0x14,0x14,0x14,0x14,0x14,0x00 }, // = 3d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, // 5 3e
  { 0x02,0x01,0x51,0x09,0x06,0x00 }, // ? 3f
  { 0x32,0x49,0x79,0x41,0x3e,0x00 }, // @ 40
  { 0x7e,0x11,0x11,0x11,0x7e,0x00 }, // A 41
  { 0x7f,0x49,0x49,0x49,0x36,0x00 }, // B 42
  { 0x3e,0x41,0x41,0x41,0x22,0x00 }, // C 43
  { 0x7f,0x41,0x41,0x22,0x1c,0x00 }, // D 44
  { 0x7f,0x49,0x49,0x49,0x41,0x00 }, // E 45
  { 0x7f,0x09,0x09,0x09,0x01,0x00 }, // F 46
  { 0x3e,0x41,0x49,0x49,0x7a,0x00 }, // G 47
  { 0x7f,0x08,0x08,0x08,0x7f,0x00 }, // H 48
  { 0x00,0x41,0x7f,0x41,0x00,0x00 }, // I 49
  { 0x20,0x40,0x41,0x3f,0x01,0x00 }, // J 4a
  { 0x7f,0x08,0x14,0x22,0x41,0x00 }, // K 4b
  { 0x7f,0x40,0x40,0x40,0x40,0x00 }, // L 4c
  { 0x7f,0x02,0x0c,0x02,0x7f,0x00 }, // M 4d
  { 0x7f,0x04,0x08,0x10,0x7f,0x00 }, // N 4e
  { 0x3e,0x41,0x41,0x41,0x3e,0x00 }, // O 4f
  { 0x7f,0x09,0x09,0x09,0x06,0x00 }, // P 50
  { 0x3e,0x41,0x51,0x21,0x5e,0x00 }, // Q 51
  { 0x7f,0x09,0x19,0x29,0x46,0x00 }, // R 52
  { 0x46,0x49,0x49,0x49,0x31,0x00 }, // S 53
  { 0x01,0x01,0x7f,0x01,0x01,0x00 }, // T 54
  { 0x3f,0x40,0x40,0x40,0x3f,0x00 }, // U 55
  { 0x1f,0x20,0x40,0x20,0x1f,0x00 }, // V 56
  { 0x3f,0x40,0x38,0x40,0x3f,0x00 }, // W 57
  { 0x63,0x14,0x08,0x14,0x63,0x00 }, // X 58
  { 0x07,0x08,0x78,0x08,0x07,0x00 }, // Y 59
  { 0x61,0x51,0x49,0x45,0x43,0x00 }, // Z 5a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5c
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5e
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   5f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   60
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   61
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   62
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   63
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   64
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   65
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   66
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   67
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   68
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   69
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6c
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6e
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   6f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   70
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   71
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   72
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   73
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   74
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   75
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   76
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   77
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   78
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   79
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7a
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7b
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7c
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7d
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7e
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   7f
  { 0x00,0x00,0x00,0x00,0x00,0x00 }, //   80
};

static inline void ValidCtrCheck(TDotAlpha *)
{
    new TDotAlpha(NULL);
}
//---------------------------------------------------------------------------
__fastcall TDotAlpha::TDotAlpha(TComponent* Owner)
    : TImage32(Owner)
{
  FSizeX = 2;
  FSizeY = 2;
  FDigitSpacing = 2;
  FColour = (TColor)0xffff00;
  Src = new TBitmap32();
  Src->DrawMode = dmBlend;
  chars = new TBitmap32();
  chars->DrawMode = dmBlend;
  Init();
  ScaleMode = Gr32_image::smStretch;
  TImage32::Bitmap->StretchFilter = sfNearest;
  for ( int i = 0; i < 16; i++ ) {
    buff[i] = 0x20;
    oldbuff[i] = 0x20;
  }
}
//---------------------------------------------------------------------------
__fastcall TDotAlpha::~TDotAlpha()
{
  delete Src;
  delete chars;
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::Loaded(void)
{
  Init();
  Draw();
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::SetDisplay(int *ptr)
{
//  if ( memcmp( ptr, oldbuff, 64) ) {
    memcpy( buff, ptr, 64);
    Draw();
    Invalidate();
//  }
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::SetChar(Byte *ptr)
{
int chr   = ptr[1]; // - 1;  ??

  for ( int i = 0; i < 5; i++ )
    charset[chr][i] = ptr[2+i];
  GenerateCustomChar(chr);
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::SetSizeX(int ASize)
{
  if ( ASize != FSizeX ) {
    FSizeX = ASize;
    Init();
    Draw();
    Invalidate();
  }
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::SetSizeY(int ASize)
{
  if ( ASize != FSizeY ) {
    FSizeY = ASize;
    Init();
    Draw();
    Invalidate();
  }
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::SetIntensity(int AIntensity)
{
  if ( AIntensity != FIntensity ) {
    FIntensity = AIntensity;
    Src->MasterAlpha = 131 + FIntensity * 4;
    Draw();
    Invalidate();
  }
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::SetColour(TColor AColour)
{
  if ( AColour != FColour ) {
    FColour = AColour;
    Init();
    Draw();
    Invalidate();
  }
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::Draw(void)
{
int i;
int chr;
int index;
int *ch_ptr;

  ch_ptr = buff;
//  Src->Clear(0);
  for ( i = 0; i < 16; i++ ) {
    chr = *ch_ptr++;
    if ( chr != oldbuff[i] ) {
      index = i;
      chars->DrawMode = dmOpaque;
      GetChar(Src, 0x20, index);
      chars->DrawMode = dmBlend;
      if ( chr & 0x10000 )
        chr = 0x20;
      GetChar(Src, chr & 0xff, index);
      if ( (chr & 0xff00) == 0x2c00 || (chr & 0xff00) == 0x2e00 )
        GetChar(Src, ((chr & 0xff00) >> 8), index);
      oldbuff[i] = chr;
    }
  }
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::Paint(void)
{
  BeginUpdate();
  TImage32::Bitmap->Clear(0);
  TImage32::Bitmap->Draw(0,0,Src);
  EndUpdate();
  TImage32::Paint();
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::Init(void)
{
//  if ( FSize > 4 )
//    Spacing = 2;
//  else
//    Spacing = 1;
  Width = 16 * ( ((FSizeX + 1) * 6) + FDigitSpacing) + 3;
  Height = (7 * (FSizeY + 1)) + 6;
  Src->Width = Width;
  Src->Height = Height;
  chars->Width = ((FSizeX + 1) * 6) * 0x80;
  chars->Height = (FSizeY + 1) * 7;
  Bitmap->Width = Width;
  Bitmap->Height = Height;
  Bitmap->Clear(0);
  GenerateCharSet();
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::GenerateCharSet(void)
{
int i;

  chars->Clear();
  for ( i = 0; i < 0x80; i++ )
    GenerateChar(i);
//  chars->SaveToFile("charset.bmp");
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::GenerateChar(int i)
{
int x, y;
int xpos, ypos;

  xpos = ((FSizeX + 1) * 6) * i;
  for ( x = 0; x < 6; x++ ) {
    if ( x == 5 ) {
      ypos = 1;
      xpos++;
    } else
      ypos = 0;
    for ( y = 0; y < 7; y++ ) {
      if ( charset[i][x] & (1 << y) )
        chars->FillRect( xpos, ypos, xpos + FSizeX, ypos + FSizeY, Color32(FColour));
      else
        chars->FillRect( xpos, ypos, xpos + FSizeX, ypos + FSizeY, 0);
      ypos += (FSizeY + 1);
    }
    xpos += (FSizeX + 1);
  }
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::GenerateCustomChar(int i)
{
int x, y;
int xpos, ypos;
int val;
int tag, bit;

  xpos = ((FSizeX + 1) * 6) * i;
  for ( x = 0; x < 5; x++ ) {
    ypos = 0;
    for ( y = 0; y < 7; y++ ) {
      val = (x + 5 * y) + 3;
      tag = val / 8;
      bit = val % 8;
      if ( charset[i][tag] & (1 << bit) )
        chars->FillRect( xpos, ypos, xpos + FSizeX, ypos + FSizeY, Color32(FColour));
      else
        chars->FillRect( xpos, ypos, xpos + FSizeX, ypos + FSizeY, 0);
      ypos += (FSizeY + 1);
    }
    xpos += (FSizeX + 1);
  }
}
//---------------------------------------------------------------------------
void __fastcall TDotAlpha::GetChar(TBitmap32 * ptr, int value, int pos)
{
int width = ((FSizeX + 1) * 6) + FDigitSpacing;
int width2 = ((FSizeX + 1) * 6);
int height = chars->Height;
int xpos = 3 + width * pos;
TRect SrcRect = Rect( width2 * value, 0, width2 + width2 * value, height);
TRect DstRect = Rect( xpos, 3, xpos + width2, 3 + height);

  if ( value < 0x80 )
    ptr->Draw( DstRect, SrcRect, chars);
}
//---------------------------------------------------------------------------


